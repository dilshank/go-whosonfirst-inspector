// Code generated by go-bindata.
// sources:
// www/index.html
// www/javascript/mapzen.whosonfirst.catalog.init.js
// www/javascript/mapzen.whosonfirst.catalog.js
// www/javascript/mapzen.whosonfirst.render.js
// www/css/mapzen.whosonfirst.catalog.css
// www/css/mapzen.whosonfirst.render.css
// DO NOT EDIT!

package http

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xdf\x6f\xd3\x30\x10\xc7\x9f\xdb\xbf\xe2\xf0\xcb\x36\xa9\x49\xb4\xc2\x06\xdb\x92\x4a\x08\x98\x84\x18\x9a\x04\x82\x3d\x20\x34\x5d\x93\xeb\xe2\xd5\xbf\x64\x5f\x3a\x3a\xb4\xff\x1d\x25\x76\xb7\x22\x21\xf1\x40\xe9\x83\x7b\x3e\x7f\xf3\xf1\xf7\xec\x93\xcb\x96\xb5\x9a\x8d\x01\xca\x96\xb0\xe9\x03\x80\x92\x25\x2b\x9a\x5d\xb5\x76\x2f\xc0\xa5\x81\x73\xe9\x03\xc3\x1b\x64\x54\xf6\x06\x3e\x3b\x52\x9d\x59\x92\x2f\x8b\xa8\x8b\xdf\x28\x69\x96\xc0\x6b\x47\x95\x60\xfa\xc1\x45\x1d\x82\x00\x4f\xaa\x12\x81\xd7\x8a\x42\x4b\xc4\x02\x5a\x4f\x8b\x4a\xd4\x21\x14\x1a\xdd\x3d\x99\xfc\x36\xe4\x83\xb2\x48\x98\x50\x7b\xe9\x78\x1b\x74\x8b\x2b\x8c\x59\x01\xc1\xd7\x95\x78\x4a\x6c\x20\x5a\xf6\x20\x31\x2b\x8b\x98\xff\x37\x4b\x77\xad\x0d\xd6\x2c\xfa\xa2\xf3\x3a\x16\xbd\x03\x8f\xdb\x54\x4f\xa6\x21\xff\x9f\x2c\x27\x78\x72\xdc\x53\x77\xe4\x7a\x73\x16\x7f\xb0\xbd\x33\xb6\x34\x92\x7f\xdf\x00\xd2\xaf\x6f\xd1\x62\xd3\xa3\xe5\xdc\x36\xeb\xb4\x77\x23\x57\x20\x9b\x4a\xd4\x68\x56\x18\x44\xcc\x02\x94\x0b\xeb\xf5\x6c\x3c\x2a\xa5\x71\xdd\xb6\x35\x31\xa8\xef\xec\xe2\x5a\x36\x02\x0c\x6a\x7a\x9a\xad\x50\x75\x54\x09\x01\x4e\x61\x4d\xad\x55\x0d\xf9\x4a\xbc\x33\x4c\x1e\x10\xae\x2e\xcf\xe1\xfd\xdb\xa1\x0f\x46\xe5\xbc\x63\xb6\x26\x71\x43\x37\xd7\x32\x91\x95\xb5\xcb\xce\x89\xd9\xc5\xf0\x5f\x16\x51\xf8\x68\xab\x88\xbe\xd2\x6c\x63\xde\x53\xe8\x14\x0f\x75\x37\x72\x95\x2a\xdb\x84\x65\x11\xcb\xed\xc3\x67\x59\x36\xfe\xdb\x81\x0f\x4a\x80\x15\x7a\x40\x27\xaf\x97\xb4\x86\x0a\x1a\x5b\x77\x9a\x0c\xe7\x3d\x2b\xbf\x21\x7e\xcd\xec\xe5\xbc\x63\xda\x17\x0d\x32\x66\xf1\x56\x32\x74\x32\x5b\xd2\x5a\x1c\x9c\x0d\x90\x8b\xfc\x63\xbc\x2d\x74\xf2\xc3\x00\x4a\xc8\xb8\xfc\xb8\x91\x46\x07\xd5\x93\x5a\xa3\xdb\xdf\xd3\xe8\xf6\x26\xf0\x33\x0a\x47\xfd\xc8\x68\x6e\x3c\xea\x4b\xc7\xd2\x9a\x70\x9a\xd6\x46\xa3\x50\x93\xa1\x53\x10\x69\xbd\xf0\xb4\x90\x4a\x65\x43\xcf\xe7\xf7\xd2\x89\x49\x12\x26\xc1\x97\x4f\x17\xa7\xb0\xdd\x52\x29\xbf\x79\x09\x92\xbc\x1f\x1e\x86\xf0\xe1\xe0\x2c\x1e\x8a\x46\x97\x07\xe2\xaf\x92\xee\xf6\xbf\x4d\x4f\xf2\x57\x87\x2f\x8f\x9f\x4f\x27\xd9\xc9\x51\xfe\xe2\x78\x3a\x3d\x39\xfe\x3e\x81\xc3\xa3\x83\xc7\xea\xb6\x1b\x3d\xcb\x66\xe3\xb2\x88\x0f\xe6\xaf\x00\x00\x00\xff\xff\x13\x44\xc1\x58\x38\x05\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1336, mode: os.FileMode(420), modTime: time.Unix(1505163423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xc1\x6a\xc3\x30\x10\x44\xcf\xeb\xaf\x58\x7c\x92\x21\xe8\x07\x4c\x0e\x6d\x09\x34\xd0\x63\xa1\xc7\xa2\x4a\xeb\x44\x44\x59\x19\x69\x15\x93\x86\xfc\x7b\x91\x6d\x9a\x5b\x4e\xd2\xa2\x99\xc7\x8c\x76\xf2\xec\xe2\xa4\x8d\x73\xbb\x0b\xb1\x7c\xf8\x2c\xc4\x94\x54\x1b\xa2\x71\xed\x06\x87\xc2\x56\x7c\x64\xac\xb3\xa2\xaa\xe9\x6e\x0d\x34\x70\x31\x09\x7f\x8a\x48\x64\xdc\xa2\x8b\xb6\x9c\x89\x45\x1f\x48\x76\x81\xea\xf5\xf5\xba\x77\x95\x12\x4f\x65\x6c\xbb\xbe\x5a\x16\xb9\x8e\x6c\x83\xb7\x27\xdc\xfe\xc3\x55\x77\x6b\x1a\x00\x49\x57\xbc\x35\x88\x88\x00\x33\xdf\xbb\x67\xec\x29\x0e\xdf\xde\xcd\x6c\x80\x59\x3a\x9a\x94\x69\xcf\xa2\xbc\xd3\x17\x13\x0a\x75\x7d\xe5\xc2\xd9\x8c\xbf\xc4\x7a\x3a\xc6\x1c\x79\xf0\x29\x8b\xb6\x46\x4c\x88\x07\xbd\x04\x54\xde\x3d\xaa\xaa\x94\xc7\x25\xd0\x92\x22\xe1\x16\x9f\x10\x12\xb1\xa3\x34\x9b\xe6\x24\xf0\x30\x52\x2e\x41\xf2\xb3\x0e\xab\x64\x2d\x01\xeb\xa8\xcd\x38\x12\xbb\xb7\xa3\x0f\x4e\xa5\xe5\xed\x3e\x1f\xf7\x1a\xcb\x1a\xb1\x47\x54\x54\x17\x01\x60\x23\xe7\x18\x48\x87\x78\x50\xed\xd7\xfb\xcb\x67\xbb\x41\x5a\xc5\x00\xeb\x77\x26\x92\x92\x18\x07\x13\x32\xf5\x0d\xdc\xfb\xa6\xf2\xfe\x02\x00\x00\xff\xff\xae\xcc\x05\x3a\xfd\x01\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogInitJs,
		"www/javascript/mapzen.whosonfirst.catalog.init.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogInitJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.init.js", size: 509, mode: os.FileMode(420), modTime: time.Unix(1505164106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x6e\xe3\x36\x10\x3e\xcb\x4f\x31\xe5\xc5\x12\xe2\x55\x7a\xd8\xd3\xaa\x3a\xb4\x45\xd0\x1f\x6c\xb7\x40\x36\x87\x02\x41\x10\x30\xe4\xd8\x22\xc2\x90\x0a\x49\xad\xd7\xcd\xfa\xdd\x0b\x8a\x94\x44\x39\xb1\xeb\x3d\xac\x37\xe4\x7c\x33\xdf\xfc\x72\xf4\x85\x1a\x78\xa2\xed\xbf\xa8\xa0\x1e\xfe\xf8\xf6\x0d\x5e\xf6\xd5\x22\x9c\xca\x6d\xa3\xad\x56\x6b\x61\xac\x1b\x21\xb3\xcb\x08\x7f\x03\x5f\x32\xea\xa8\xd4\x1b\xa8\x21\x5f\x77\x8a\x39\xa1\x55\x5e\xbc\x2c\x16\x99\xa7\xb5\x28\xd7\x50\x83\x3f\x66\x4b\xa9\xf5\x63\xd7\x2e\x3f\xc0\x88\x13\x7c\x05\xec\xa1\x47\x67\x3d\xbe\x33\x12\x6a\x58\x36\xce\xb5\x1f\x2e\x2f\x97\x70\x01\x52\x33\xea\xb1\x65\xa3\xad\x83\x0b\x58\x5e\x0a\xde\x0b\x04\xaf\x46\x35\xad\xa4\xa6\x1c\xea\xc9\xb2\xb1\x6d\xf1\xe2\xc5\xfe\x5f\x8f\x71\xd4\x6c\xd0\x87\x67\x6c\x5b\x86\x43\xd5\x0b\xfb\x1f\xb1\x86\x3c\x5c\x96\x06\x29\xdf\x7d\x76\xd4\x21\xfc\x50\xc3\xfb\x60\x26\xcb\x0c\xba\xce\xa8\xa0\xb2\x9f\x14\xfb\x28\x1d\x75\x9d\xbd\x67\x9a\x23\xd4\x91\xe8\x76\x19\x6e\x97\x77\xd5\x21\xce\xe1\x57\xf7\x0a\x77\x83\x5f\xdd\x80\x1d\x15\x0c\xdd\x26\x40\x83\xb6\xd5\xca\x62\x0a\xf5\x28\x4e\x1d\x85\x1a\x54\x27\x65\xa2\xef\xcc\x0e\xa2\xeb\x11\xf0\xe7\xe7\xbf\x3f\x95\x2d\x35\x16\x73\x43\xb7\xc5\xab\x50\x18\x75\xac\x81\x1c\x87\x88\xc3\x2f\xd3\xca\x6a\x89\xa5\xd4\x9b\x9c\x5c\x5d\x5f\x93\x95\xaf\xd2\x0a\xb0\x48\xf3\x02\x6b\x2a\x2d\x0e\x26\x83\xb9\x87\xdc\x13\x07\x9e\xfd\x54\x2c\x83\xcf\xde\x5b\xdc\xc2\x3f\x7f\x7d\xfc\xdd\xb9\xf6\x1a\x9f\x3b\xb4\x2e\x0f\x48\x83\xcf\x25\xe5\xfc\xea\x0b\x2a\xf7\x51\x58\x87\x0a\x4d\x4e\x7c\x7d\xc9\x2a\x16\xba\x07\x02\x00\x0c\x78\xdd\xa2\xca\xc9\x6f\x57\x37\x83\x73\xce\x74\x38\x99\xb3\xa8\x78\xb0\xbe\x5f\xf5\x9d\x68\x50\x71\x34\x69\x27\x86\x7e\x99\x5c\x64\xda\x70\x1b\x9a\xe5\x96\xc4\x23\x3a\x72\x37\x1e\x48\x28\x80\x47\x33\xdd\xa9\xbe\xb1\x82\xa4\x94\xa8\x36\xae\xa9\x86\xee\x0b\xcd\xf7\x20\x7d\x6f\x70\xcd\xba\x27\x54\xae\x64\x06\xa9\xc3\x2b\x89\xfe\x94\x93\x5e\x4e\x8a\x90\xa4\xb5\x36\x90\x7b\x2d\x51\xff\x58\x81\x80\x9f\x02\x43\x05\xe2\xe2\x22\x3a\x99\xd6\x3d\xd2\xde\x8a\xbb\x6a\x92\x59\xdd\x19\xd6\x33\x52\x47\x6f\x49\x38\x92\xbb\x6a\xd6\x5e\x9d\x11\x23\xa2\x33\x82\x24\x3d\xd5\x50\xdb\x8c\x32\x7f\x08\xba\x87\x04\xf7\x0c\xa5\x3c\x15\x17\x27\xb1\xcf\x12\x7c\x49\xdb\x16\x15\xff\xb5\x11\x92\xe7\x07\x9a\xbe\xb7\x3f\x69\x8e\x79\xc0\x17\x45\x12\x93\x77\xe3\x7c\xc2\x11\x7d\x16\x9d\x47\xcf\xc8\x3a\x23\xce\xe7\x1a\xc0\x67\x51\x75\x46\xcc\x98\x6c\xa3\xb7\xdf\x91\xc7\x01\x5d\x5a\x74\x3f\x3b\x67\xc4\x43\xe7\x30\x27\xbe\x52\xef\x7c\x11\xfd\x04\x88\x62\x2a\xf4\xa4\x70\x8e\x73\xc4\xc3\x49\x51\x1c\x3c\x44\x4f\xe8\xe8\xbd\xd1\xdb\x53\x2e\x9a\xc1\xc5\x01\x3c\x23\x4c\xea\x7f\x0a\x36\x56\xed\x14\x68\x48\xf7\x49\xbe\x21\xec\x90\x8a\x6c\x6c\xde\x29\x1f\x5a\x31\x29\xd8\x63\xba\x36\x70\x98\xaf\x3e\x6a\xf4\x25\xc1\xd9\xb2\x48\xe6\x06\x65\xb9\x79\xbb\x04\x43\x75\xc3\x94\xa2\xa3\x42\xda\x34\x73\x1b\x74\x31\x6d\xbf\xec\xfe\xe0\x39\x89\x90\x77\x04\x2e\x42\xf1\x8e\xbd\xbf\x89\x30\xbd\x8e\xfa\x2b\x18\x89\xfd\x3a\x8b\xb7\xa5\x75\x3b\x89\x25\x17\xb6\x95\x74\x07\x75\x0d\xe4\x41\x6a\xf6\x48\x86\x67\x3e\x3b\x02\x04\xa2\xb4\x42\x12\xf9\x32\x94\xa5\x50\x0a\xcd\x4d\xd8\x5e\xa1\x51\x62\x6e\x03\x24\xbe\xfb\x19\x4a\x8b\xf0\xbf\xc6\x83\x13\xc7\xac\x37\x82\x8f\xd4\x61\x45\xed\x0f\x5a\x72\xca\xeb\x1b\x1f\x25\xe1\x81\x8f\xff\xdd\xfb\xc2\x24\xbb\xe8\x95\x8d\xf3\xa7\x2f\x55\x38\x18\x40\xa6\xa5\x6d\xa9\x22\x2b\x20\xef\x49\x32\x7f\x33\x95\xd9\x08\x06\x41\xfa\x14\x0c\xd8\x33\x26\x2d\x5b\xbc\x62\xf0\x23\x30\xf7\x49\xf8\x9d\x79\xa4\xbd\x8e\x6b\x31\x49\xad\x4d\x14\xdf\x8a\xe6\x70\xdc\xd2\x28\xd3\x2c\xf7\x8b\x2d\x22\xf3\x61\x50\x23\x60\x26\x4b\x0c\x4f\x74\xa1\xa3\xe2\x17\x46\x0f\xef\x97\xf8\x22\x7c\x4e\xc4\x7b\xff\x8d\x59\x2d\x16\xfb\x22\xf7\x59\xf9\x2f\x00\x00\xff\xff\x90\x93\xf0\x9f\xed\x0a\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogJs,
		"www/javascript/mapzen.whosonfirst.catalog.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.js", size: 2797, mode: os.FileMode(420), modTime: time.Unix(1505166186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstRenderJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xcd\x6e\xdb\x30\x0c\x3e\xcb\x4f\x41\x78\x87\xda\x48\xe0\x76\xd7\xba\xc6\x50\x0c\xbb\xee\xb4\xdb\x50\x14\x8a\xa5\x2c\x5a\x14\x2b\x90\x99\x25\x5d\x1b\x60\xef\xb0\x37\xdc\x93\x0c\x94\x64\x47\x4e\x1c\xf7\x50\x57\x36\x3f\xfe\xe8\xe3\x47\xe6\x17\xb7\xb0\xe1\xdb\xdf\xb2\x81\xaa\x3b\xbc\xbd\xc1\xeb\xb1\x4c\xfc\x5b\xb1\x5f\x99\xd6\x34\x4b\x65\x5b\xec\x21\x83\x8f\x01\x3e\x82\x2f\xac\x6c\x84\xb4\x50\x41\xb6\xdc\x35\x35\x2a\xd3\x64\xf9\x6b\x92\x30\xca\xda\x4a\xbd\x84\x0a\xe8\x95\xdd\x78\xe0\xb3\xe0\xc8\x6f\xee\xa1\x07\x8b\x39\xd4\x78\xc8\x5f\x13\xc6\x18\xfd\xa9\x25\x64\x8f\xd6\xf2\x97\x42\xb5\xee\x7f\x26\x72\x6f\x65\x56\xe2\xce\x36\x2e\x6a\x48\xfb\xac\x55\x8b\x5d\x88\x92\x40\xc7\x84\x01\x00\xd0\x51\xea\x56\x02\x85\xc3\x97\xad\x34\xcb\x4c\xe4\x50\x55\x90\x9a\xc5\x4f\x59\x63\x7a\x3d\xa6\x50\xf5\x79\xcc\x3e\x9c\x77\xa2\xbb\xd5\xa6\x41\xd9\x10\x5f\xb1\x2f\xca\x43\xe4\xdb\x83\xf7\x96\x6f\xb7\x8e\x25\x61\xea\xdd\x46\x36\x58\xd4\x56\x72\x94\x5f\xb4\xa4\xb7\x2c\x6d\xb7\xbc\x49\xf3\x92\x05\x16\x58\xf0\x28\xe8\xd9\x88\xcf\x2b\xa5\x45\x16\x52\xfa\xa2\xba\xca\x03\xb0\xbb\x3c\x3b\xce\x07\x6c\xab\x1a\xc7\xd9\xee\x58\xa2\xf2\x90\x2f\xb4\x9c\x28\xce\xd9\x53\x9f\xd7\x9d\x8b\x56\xe2\x23\xa2\x55\x8b\x1d\xca\x2c\xad\x35\x6f\xdb\x74\x0e\x11\xb0\x0b\xbf\x34\x16\xb2\x35\xa8\x06\x84\x63\xbc\xa7\xc4\x9a\xfd\x54\x46\x1b\xd2\x39\xac\xe6\x0b\xa9\x1d\xb7\x50\xc1\xda\x7f\xef\x8d\xcf\x35\x1e\x48\x7e\x74\x2f\xf8\x44\xd7\x83\x19\xa4\x45\x0a\x33\x58\xc3\xfd\x05\x7c\x25\xb9\x98\xec\x04\xae\x2e\x52\x5f\xa2\xbf\xc9\x03\x7e\x35\x42\x66\xa7\xd2\x82\x93\x8f\x3f\xe8\x9b\xc3\x38\xf3\x88\x7a\xae\x96\x21\xd2\x58\x41\x0b\x23\x5e\xce\xb4\x46\x93\x94\x89\xef\xeb\xa7\xb9\xe3\x20\xe4\x0f\x91\x07\x05\x90\x73\x1e\xf1\x60\xcd\x7e\x60\xf7\x35\x77\xba\x3a\x33\x0e\x55\xe7\x1e\x5e\x03\x31\xc8\x9a\x7d\x3f\x7f\x1e\x14\xe4\xe9\xa0\xa5\xd7\x25\x8b\x84\x49\x83\xfb\xbe\x30\x6b\xb3\xf3\x24\x15\x5a\x36\x3f\x70\x55\xc6\x5b\x22\x18\x2b\xb8\xbb\x3e\xcb\x6e\x1e\xd3\x7f\x7f\xfe\xa6\xe3\x3b\xe2\x14\xe7\xa1\x82\x8f\x13\x3b\xc1\x73\x7d\xf7\x34\x1e\xc6\x29\x45\xb5\x53\xfd\xdc\xe9\xcb\xb9\x20\x37\x55\xdd\x95\xa0\xe0\xc1\xdf\xb5\x04\x35\x9b\x85\x32\xfa\xde\x2b\x94\x9b\x89\xc8\x5a\xc5\x82\xbd\x2e\x14\xe5\x8b\xa7\xe9\xf8\x40\xd3\xa1\xe2\x96\x52\x8e\x6b\x9a\xa1\x9b\x0d\x6c\x04\x1e\x6f\x37\x41\x47\xba\x4d\x6d\x98\x5a\xfa\x6e\x09\xf9\xf1\x16\x25\xbb\xbd\xf5\xe5\xaf\x70\xa3\xdb\xad\xac\x15\xd7\xf5\x8a\xdb\x36\x13\x79\x19\x7b\xd0\xce\x7c\x7f\xa5\x12\x9a\x8e\x67\x3b\x4b\x89\x58\x12\x23\x00\x54\xa8\xe5\x09\x43\x8d\x3b\xa5\x9e\xdc\x09\xa7\x6d\xe0\xc2\xc6\xcc\x85\x3d\x10\x53\x46\x98\x8e\x32\x96\x30\xfa\x99\x8d\x15\x58\x26\xc9\x31\xcf\xf2\x92\x25\xff\x03\x00\x00\xff\xff\x52\x66\xe2\xfd\xc8\x07\x00\x00")

func wwwJavascriptMapzenWhosonfirstRenderJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstRenderJs,
		"www/javascript/mapzen.whosonfirst.render.js",
	)
}

func wwwJavascriptMapzenWhosonfirstRenderJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstRenderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.render.js", size: 1992, mode: os.FileMode(420), modTime: time.Unix(1505163474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstCatalogCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\x4d\x2c\x50\xa8\xe6\x52\x50\x50\x50\xc8\x48\xcd\x4c\xcf\x28\xb1\x52\x30\x35\x30\x28\xa8\xb0\x06\x0b\x95\x67\xa6\x94\x64\x58\x29\x18\x1a\x18\xa8\x5a\x73\xd5\x72\x71\xe9\xa5\xa4\x96\x24\x66\xe6\x14\x43\x75\xa4\x64\x16\x17\xe4\x24\x56\x5a\xe5\xe5\xe7\xa5\x82\xe4\x01\x01\x00\x00\xff\xff\x38\x70\x1a\xb5\x4d\x00\x00\x00")

func wwwCssMapzenWhosonfirstCatalogCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstCatalogCss,
		"www/css/mapzen.whosonfirst.catalog.css",
	)
}

func wwwCssMapzenWhosonfirstCatalogCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstCatalogCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.catalog.css", size: 77, mode: os.FileMode(420), modTime: time.Unix(1505165572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstRenderCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6a\xf3\x30\x10\x46\xf7\x3e\xc5\xc0\x4f\x96\x02\xe7\x87\x76\xa1\x9c\x46\xb6\xc6\xf6\x50\x79\x46\x48\x93\xd6\xa6\xe4\xee\x25\x92\x12\x48\x13\x8a\x57\xfa\x8c\xde\x7b\xe8\x1c\xe0\xbb\x03\x00\x08\x94\xd5\x64\xdd\x03\x1a\xdd\x23\x5a\x60\x61\x3c\x95\x5f\xab\x4b\x33\xb1\xed\xe3\x56\xcf\xd1\x79\x4f\x3c\xd7\xe1\xd2\x75\xea\x86\x80\x0d\xf3\x45\x5e\x17\x7b\xec\xfb\xc3\xa9\x61\x19\xcd\x82\x34\x2f\x6a\xff\xe3\x5a\xc7\x49\x58\xcd\xe4\x56\x0a\xbb\x85\xec\x38\x9b\x8c\x89\xa6\x0a\x4b\x8d\xf4\x89\x49\x69\x74\xc1\xb8\x40\x33\x5b\x50\x89\x8f\x7a\xb8\x07\xb5\xc0\x32\x5c\xcf\x85\xb3\x34\xce\xe0\xc6\x8f\x39\xc9\x99\xbd\x19\x25\x48\xb2\xff\xd0\x5f\xbf\x7a\x75\x90\xe4\x31\x59\xc8\x12\xc8\x83\x2e\xc4\x75\x57\xdc\xb4\x99\x03\x4e\xfa\xec\x79\x4e\xb9\x9b\xfd\xcd\x5c\xd8\x66\x10\x55\x59\x2d\x1c\xe3\xd6\x34\x0f\x05\x2f\x4d\x2f\xb2\x0a\xbe\x54\x10\x9b\xfa\xcc\xef\x6f\x87\x5b\xd8\xf6\x7b\xfa\xfb\x95\xba\x4b\xf7\x13\x00\x00\xff\xff\x09\xbc\xb4\xeb\xfa\x01\x00\x00")

func wwwCssMapzenWhosonfirstRenderCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstRenderCss,
		"www/css/mapzen.whosonfirst.render.css",
	)
}

func wwwCssMapzenWhosonfirstRenderCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstRenderCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.render.css", size: 506, mode: os.FileMode(420), modTime: time.Unix(1505163885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/javascript/mapzen.whosonfirst.catalog.init.js": wwwJavascriptMapzenWhosonfirstCatalogInitJs,
	"www/javascript/mapzen.whosonfirst.catalog.js": wwwJavascriptMapzenWhosonfirstCatalogJs,
	"www/javascript/mapzen.whosonfirst.render.js": wwwJavascriptMapzenWhosonfirstRenderJs,
	"www/css/mapzen.whosonfirst.catalog.css": wwwCssMapzenWhosonfirstCatalogCss,
	"www/css/mapzen.whosonfirst.render.css": wwwCssMapzenWhosonfirstRenderCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.css": &bintree{wwwCssMapzenWhosonfirstCatalogCss, map[string]*bintree{}},
			"mapzen.whosonfirst.render.css": &bintree{wwwCssMapzenWhosonfirstRenderCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"javascript": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.init.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogInitJs, map[string]*bintree{}},
			"mapzen.whosonfirst.catalog.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogJs, map[string]*bintree{}},
			"mapzen.whosonfirst.render.js": &bintree{wwwJavascriptMapzenWhosonfirstRenderJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
