// Code generated by go-bindata.
// sources:
// www/index.html
// www/javascript/mapzen.whosonfirst.catalog.init.js
// www/javascript/mapzen.whosonfirst.catalog.js
// www/javascript/mapzen.whosonfirst.render.js
// www/css/mapzen.whosonfirst.catalog.css
// www/css/mapzen.whosonfirst.render.css
// DO NOT EDIT!

package http

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x6f\xa3\x30\x10\x85\xcf\xc9\xaf\x18\xcd\x65\x6f\xf1\x1f\x30\x5c\x76\x37\x52\xa5\x4a\x39\xf4\x90\x63\xe5\xe0\xa1\x38\x31\x36\xf2\x0c\xa4\xe9\xaf\xaf\xc0\xd0\xa4\x52\x6f\x69\xb8\x60\x3f\x3d\x3e\xbf\x87\xc6\xba\x91\xd6\x97\x6b\x00\xdd\x90\xb1\xe3\x02\x40\x8b\x13\x4f\xe5\xbe\x89\x7f\x18\x76\x01\xb6\x2e\xb1\xc0\x5f\x23\xc6\xc7\x37\x78\xe9\xc8\xf7\xe1\x44\x49\xab\xec\xcb\xdf\x78\x17\x4e\x20\x97\x8e\x0a\x14\x7a\x17\x55\x31\x23\x24\xf2\x05\xb2\x5c\x3c\x71\x43\x24\x08\x4d\xa2\xba\xc0\x8a\x59\xb5\xa6\xfb\xa0\xb0\x39\xf2\x66\x72\xaa\xfb\x30\xe7\x26\x72\x0c\xf5\x18\x74\x53\xe5\xa0\xbf\xce\x4d\x14\x2c\xa5\x05\x3b\x52\x33\x9a\xab\xe4\x3a\xb9\x85\x1f\xcd\x60\xb2\x8a\xc0\xa9\x2a\xf0\x2a\x2c\xe0\xd6\x8d\xdd\xb1\xd4\x2a\xeb\xe5\x1d\xac\x1f\x42\x3e\x02\xbd\xfc\xd7\x47\xb2\x5d\x70\xf2\xfd\x00\x98\x9f\x71\x44\xd5\x32\xa3\xfa\x10\xed\x65\x3e\xdb\xba\x01\x9c\x2d\xb0\x32\x61\x30\x8c\x59\x05\xd0\x75\x4c\x6d\xb9\x5e\x69\x17\xba\xfe\x36\x1a\x4e\xee\x73\xac\x5f\x9d\x45\x08\xa6\xa5\xeb\x6e\x30\xbe\xa7\x02\x11\x3a\x6f\x2a\x6a\xa2\xb7\x94\x0a\xfc\x1f\x84\x12\x18\xd8\xef\xb6\xf0\xf4\x6f\x9a\xa9\x95\x3e\xf4\x22\x31\xcc\x5c\xee\x0f\xad\x9b\xc9\x3e\xc6\x53\xdf\x61\xf9\x3c\xbd\xb5\xca\xc6\xaf\x58\x2a\xe7\x9a\x77\x4b\xf8\x44\xdc\x7b\x99\x7a\x5b\x37\xcc\xcd\x96\xa5\x56\xb9\xae\x56\xf9\xb2\x7e\x06\x00\x00\xff\xff\x9b\x16\x2d\x8d\xb4\x03\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 948, mode: os.FileMode(420), modTime: time.Unix(1506215943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xc1\x6a\xc3\x30\x10\x44\xcf\xeb\xaf\x58\x7c\x92\x21\xe8\x07\x4c\x0e\x6d\x09\x34\xd0\x63\xa1\xc7\xa2\x4a\xeb\x44\x44\x59\x19\x69\x15\x93\x86\xfc\x7b\x91\x6d\x9a\x5b\x4e\xd2\xa2\x99\xc7\x8c\x76\xf2\xec\xe2\xa4\x8d\x73\xbb\x0b\xb1\x7c\xf8\x2c\xc4\x94\x54\x1b\xa2\x71\xed\x06\x87\xc2\x56\x7c\x64\xac\xb3\xa2\xaa\xe9\x6e\x0d\x34\x70\x31\x09\x7f\x8a\x48\x64\xdc\xa2\x8b\xb6\x9c\x89\x45\x1f\x48\x76\x81\xea\xf5\xf5\xba\x77\x95\x12\x4f\x65\x6c\xbb\xbe\x5a\x16\xb9\x8e\x6c\x83\xb7\x27\xdc\xfe\xc3\x55\x77\x6b\x1a\x00\x49\x57\xbc\x35\x88\x88\x00\x33\xdf\xbb\x67\xec\x29\x0e\xdf\xde\xcd\x6c\x80\x59\x3a\x9a\x94\x69\xcf\xa2\xbc\xd3\x17\x13\x0a\x75\x7d\xe5\xc2\xd9\x8c\xbf\xc4\x7a\x3a\xc6\x1c\x79\xf0\x29\x8b\xb6\x46\x4c\x88\x07\xbd\x04\x54\xde\x3d\xaa\xaa\x94\xc7\x25\xd0\x92\x22\xe1\x16\x9f\x10\x12\xb1\xa3\x34\x9b\xe6\x24\xf0\x30\x52\x2e\x41\xf2\xb3\x0e\xab\x64\x2d\x01\xeb\xa8\xcd\x38\x12\xbb\xb7\xa3\x0f\x4e\xa5\xe5\xed\x3e\x1f\xf7\x1a\xcb\x1a\xb1\x47\x54\x54\x17\x01\x60\x23\xe7\x18\x48\x87\x78\x50\xed\xd7\xfb\xcb\x67\xbb\x41\x5a\xc5\x00\xeb\x77\x26\x92\x92\x18\x07\x13\x32\xf5\x0d\xdc\xfb\xa6\xf2\xfe\x02\x00\x00\xff\xff\xae\xcc\x05\x3a\xfd\x01\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogInitJs,
		"www/javascript/mapzen.whosonfirst.catalog.init.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogInitJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.init.js", size: 509, mode: os.FileMode(420), modTime: time.Unix(1505217274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x4d\x6f\xe3\x36\x10\x3d\xcb\xbf\x62\xca\x8b\x25\xc4\xd1\xf6\xd0\x5e\xaa\xea\xd0\x16\x41\x3f\xb0\xdd\x02\xd9\x1c\x0a\x04\x41\x40\x4b\x63\x8b\x08\x43\x2a\x24\xb5\x5e\x37\xeb\xff\x5e\x90\xd4\x07\x65\x2b\xb6\xb2\xc0\xae\x97\xe2\x7b\xf3\x46\xc3\xc7\x21\xf5\x85\x2a\x78\xa6\xf5\x7f\x28\x20\xef\xfe\xf3\xed\x1b\xbc\x1e\xb2\x85\x1f\xa5\xbb\x4a\x6a\x29\x36\x4c\x69\xd3\x43\x46\x0f\x5b\xf8\x04\x3e\x2d\xa8\xa1\x5c\x6e\x21\x87\x78\xd3\x88\xc2\x30\x29\xe2\xe4\x75\xb1\x88\xac\xac\x46\xbe\x81\x1c\xec\x30\x5a\x72\x29\x9f\x9a\x7a\xf9\x13\xf4\x38\x56\xae\xa0\x58\x3b\x74\x04\x00\xe0\x38\xb5\x92\x46\x42\x0e\xa5\x2c\x9a\x67\x14\x26\xe5\xb2\xa0\x16\x9e\xba\x99\x42\xf2\x6c\x11\x45\x0e\xda\x28\x0e\x79\x4b\xb8\x82\xe5\x87\x0f\x4b\xb8\x82\x1e\x5e\x49\x6d\xc2\x71\x4d\x4d\x25\xe8\x33\x5a\x28\x2b\x1d\x96\x95\xd9\xa2\x0b\x26\x05\x97\xb4\x84\x7c\x48\x4f\xe9\x3a\x79\xb5\xd3\xf6\xaf\xc3\x18\xaa\xb6\x68\x6b\xa4\x74\x9d\xfa\x81\x4b\xc6\x23\xd8\x06\x62\xff\x30\x55\x48\xcb\xfd\x67\x43\x0d\xc2\x77\x39\xfc\xe0\xc3\x44\x91\x42\xd3\x28\xe1\x29\x87\x81\xe8\x4a\x65\xa8\x69\xf4\x63\x21\x4b\x84\xbc\x15\xba\x5f\xfa\xa7\xcb\x87\xec\x18\x67\xf0\xab\x39\xc1\xdd\xe1\x57\xd3\x61\x7b\x82\xa2\xbb\x00\xa8\x50\xd7\x52\x68\x0c\xa1\x16\x55\x52\x43\x21\x07\xd1\x70\x1e\xf0\x8d\xda\x43\x9b\x7a\x0b\xf8\xeb\xf3\x3f\x9f\xd2\x9a\x2a\x8d\xb1\xa2\xbb\xe4\xe4\x55\x0a\x6a\x8a\x0a\x62\xec\xde\xd8\xff\x5b\x48\xa1\x25\xc7\x94\xcb\x6d\x4c\x6e\x6e\x6f\xc9\xca\xae\xdd\x0a\x30\x09\xeb\x02\x1b\xca\x35\x76\x21\x7d\xb8\x75\x6c\x85\xbd\xce\x61\x58\x2c\x85\x2f\x36\x5b\xdc\xc1\xbf\x7f\x7f\xfc\xc3\x98\xfa\x16\x5f\x1a\xd4\x26\xf6\x48\x85\x2f\x29\x2d\xcb\x9b\x2f\x28\xcc\x47\xa6\x0d\x0a\x54\x31\xb1\xeb\x4b\x56\xed\x42\x3b\xa0\x35\x5d\x87\x97\x35\x8a\x98\xfc\x7e\x73\xd7\x25\x67\x54\x83\x43\x38\x8d\xa2\xf4\xd1\x0f\x2b\x67\x67\x85\xa2\x44\x15\xda\xb9\xf3\x4b\x1b\xd5\xfe\xf8\x5c\x0b\xa9\x4a\xed\x5d\x73\x4f\xda\x21\x1a\xf2\xd0\x0f\xc8\x43\x16\x10\x0a\xd9\x08\x67\x32\x3f\x99\x72\x14\x5b\x53\x65\xa7\x91\x0d\x5d\x73\x0c\xb7\x4a\xa1\x90\x1a\xbc\xe1\x68\x47\x31\x71\xf3\x24\xc9\x16\x01\x47\xcb\x46\x15\xf8\x58\x21\x2d\x51\x9d\xe3\x56\xa4\x2f\xd1\x88\x93\xd2\xba\x46\x51\xfe\x56\x31\x5e\xc6\x47\x6c\xeb\xaa\x4f\xb2\xc4\x98\x78\x0a\x49\x92\xa9\xb4\xf7\xf5\x3b\x13\x08\x18\xf3\xe4\x2d\x61\x5a\xbc\xa2\xba\x7a\x9f\x78\xc0\x98\x27\x6e\x09\xd3\xe2\x8d\x62\xef\xd3\x1e\x08\xf3\xa4\x1b\xc5\xa6\x95\x75\x25\x77\xef\x5c\xf4\x81\x31\x4f\xfb\xfa\x8d\x82\xbb\x10\x8f\x4a\xee\xce\x09\xab\xa0\xde\x3d\x61\xa4\x3b\x32\xe1\x25\x70\x60\x98\x4b\xd0\x60\x79\x2f\x41\x87\xd5\xb8\x98\xec\x50\xbc\x24\x8b\xda\x3f\xe3\xda\xb8\xcd\x39\xce\xa4\x8f\xe5\xb7\x6c\xb4\x91\x0a\x62\x5b\x43\x96\x7f\x9f\x01\x83\x9f\x7d\x6b\xc8\x80\x5d\x5d\xf9\x53\x73\xd4\xbc\xdb\x7e\x71\xcf\x1e\xb2\x61\xce\x97\xcd\x96\x9e\x1a\x7a\xdf\xed\xcb\x87\x6c\x74\x46\xd8\x72\xf5\x10\xb7\x77\x8e\x00\x8d\x62\xfd\xbc\xf5\x58\x70\x72\xd8\xfa\xf5\x73\xce\xfa\x8e\x7b\x9c\xc1\x63\x81\x9c\x9f\x73\x40\x49\xda\xd3\x24\xc0\xcf\x32\x9e\xc7\x27\x49\xf0\xd2\x6e\xf9\x67\x0b\xf6\xe8\x59\x72\x16\x3d\x12\x73\x06\x9a\x2d\xd6\xa3\x67\x89\x59\xf4\x48\xcc\x5a\x70\xb6\x56\x07\x9e\x25\xd5\x28\x36\x52\x72\x16\x9e\x25\x35\xa6\xac\x1b\x63\xa4\x38\x43\xf2\x80\x7e\xb5\x07\x4e\xaa\xd1\xfc\x62\x8c\x62\xeb\xc6\x60\x4c\xac\xa3\xae\xad\xd9\xec\x79\xcc\x92\xc1\x90\x21\x65\xde\x61\x54\xc9\x1d\xe9\x5f\xae\x7f\xb1\xd3\x1d\xeb\x83\x26\x47\x37\xa8\x67\x34\x74\x66\xff\x8a\xa2\x0e\x3c\xd5\xbb\xac\xe8\x39\x58\x6f\xc4\x73\xa0\xde\x40\xe7\x40\xdd\xca\x9f\x4d\xaa\xab\x43\xd0\xa1\x4e\xea\x2b\x45\xc1\x59\xf1\x14\x5e\x8b\xb1\x6b\x3d\xae\x38\x68\xfd\x81\xa3\xcb\x70\xd0\x31\x90\xa7\xdb\xe9\x45\xed\x56\xc3\x37\x30\x34\x94\x71\x1d\x16\x78\x8b\xa6\xad\xee\xaf\xfb\x3f\xcb\x98\xb4\x90\x6b\x02\x57\xde\x0e\x2d\xdd\x5e\xba\xdb\xb9\x54\x9b\x3d\xc7\xb4\x64\xba\xe6\x74\x0f\x79\x0e\x44\x48\x81\xa4\xbb\x8b\x46\x6f\xe0\x80\xac\xb9\x2c\x9e\x48\x9b\x7d\x84\x3c\x65\x42\xa0\xba\xf3\x77\x6c\x52\xb1\x12\x49\x16\x05\xf7\xd9\xf6\x76\x1a\x21\xd7\x08\x17\xa3\xbb\x24\xde\x0a\xee\xbc\x79\x14\x3c\xf2\x97\xdd\x91\x09\x87\x12\x4d\x7c\x84\xf9\xbb\x68\xfb\xf3\x68\x6b\x1c\x5c\x9b\x4f\x62\xcc\x6f\x20\x21\xe1\x68\x77\x16\x92\xeb\x9a\x0a\xb2\x02\xf2\xe3\x0c\x38\xb3\x37\xef\x89\x45\xbc\xa4\xc2\xa9\xd6\x01\x73\x52\x69\xd4\x03\xfc\x44\xd8\x95\x3a\xec\xdc\x1d\x1c\xe0\xa7\x42\x87\xfb\xca\x1f\x1f\xc1\x41\x1e\x77\x3b\xad\x3b\x5a\xc2\xb9\x20\xf0\xd0\xcd\xbc\x95\xda\x0f\x20\x07\x77\xdf\x18\x0b\xff\xb5\xd3\x3e\xb7\xdf\xd1\xd9\x62\x71\x48\xe2\x24\x8b\x16\xff\x07\x00\x00\xff\xff\x9a\x6c\x2d\x7d\xd1\x0f\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogJs,
		"www/javascript/mapzen.whosonfirst.catalog.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.js", size: 4049, mode: os.FileMode(420), modTime: time.Unix(1506218758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstRenderJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x41\x6e\xdb\x3a\x10\x5d\x4b\xa7\x18\xe8\x2f\x22\xc1\xfe\x4a\xfe\x36\x8a\xf0\x11\x14\xdd\x76\xd5\x5d\x11\x04\xb4\x38\xae\x59\xd3\x92\x41\x8e\x63\xa7\x89\x81\xde\xa1\x37\xec\x49\x8a\x21\x29\x59\xb2\x65\x65\x91\x44\x12\xdf\x7b\x33\x9c\x79\x33\xc8\x8b\x30\xb0\x11\xdb\x9f\x58\x43\xd9\x3e\xbc\xbf\xc3\xdb\xb1\x88\xfd\x5b\xbe\x5f\x35\xb6\xa9\x97\xca\x58\xea\x20\x83\x8f\x01\x3e\x82\xcf\x0d\xd6\x12\x0d\x94\x90\x2e\x77\x75\x45\xaa\xa9\xd3\xec\x2d\x8e\x23\x8e\x6a\x51\x2f\xa1\x04\x7e\x8d\x6e\x3c\xf0\x59\x0a\x12\x37\xf7\xd0\x81\xe5\x1c\x2a\x3a\x38\x4a\xe4\x48\x7b\x23\xb6\x5b\xa7\x28\x9b\x6a\xb7\xc1\x9a\xf2\xca\xa0\x20\xfc\xac\x91\xdf\xd2\x44\xaa\x97\x24\x2b\x18\x1f\xb0\xb9\x45\x7a\x24\x32\x6a\xb1\x23\x4c\x93\x4a\x0b\x6b\x93\x39\x24\x72\xb7\xd9\xa2\x61\x6c\x2b\xee\x93\x70\x5c\xfe\x51\x4b\x48\x1f\x8d\x11\xaf\xb9\xb2\xee\x6f\x2a\xb3\xec\x8d\x4f\xa2\xee\x5e\x7c\x89\x70\xcb\x67\xad\x2c\xb5\x19\x3b\x91\x63\x1c\x01\x00\xf0\x23\x6a\x8b\xc0\x82\xf4\xba\xc5\x66\x99\xca\x0c\xca\x12\x92\x66\xf1\x03\x2b\x4a\xa6\x54\xa5\xaa\xce\x55\x3b\x41\x4f\xe3\xd4\xab\xa6\x26\xac\xe9\x8c\x4b\x78\xe8\x71\x87\x31\xae\xd5\xcf\x6e\x45\x9d\x64\x45\x14\x8a\x10\x08\x39\x97\xb2\x96\x9f\x56\x4a\xcb\x34\x04\xeb\xa7\xd3\xd6\xba\x0f\xf3\x4c\x8f\x32\x48\x3b\x53\xb7\xed\x2b\xbc\xf8\x71\x3e\xe8\xbd\xaa\x68\xb4\xf7\x5d\x11\xf9\xa2\x24\x16\x1a\x27\xd2\x77\xe7\xc1\x00\xee\xf9\x5a\xfb\xbd\x90\xfb\xfd\xaf\x44\x12\x4a\x5b\x47\x6b\x83\x2d\x1b\x03\xe9\x1a\x54\x0d\xd2\xb5\xa7\x2b\xb5\x69\xf6\x53\xf1\x4d\x08\xee\xb0\x5a\x2c\x50\xbb\x36\x40\x09\x6b\xff\xbd\x3b\x7c\xae\xe8\xc0\xa3\xc1\xb7\x84\xff\xf9\xb2\x30\x83\x24\x4f\x60\x06\x6b\xb8\xbf\x80\xaf\x50\x4c\x77\x8e\x56\x17\xa1\x2f\xd1\x5f\xf1\x40\x5f\x1a\x89\xe9\x29\xb5\x40\xf2\xfa\x83\x0e\x3a\x8c\x3b\x1e\x31\xda\xd5\x34\x64\x9b\x46\x47\x5a\x34\xf2\xf5\xdc\xd6\x82\x44\x2a\xbf\xad\x9f\xe6\xae\x0e\x81\x11\xd4\x07\x49\x30\xb9\x2f\x68\x9a\xfd\xe0\xdc\xe7\x1d\x10\xe7\x87\x03\xab\x7a\xbe\x77\xc5\xc0\xa8\xcd\xbe\x1b\x58\x0f\x0a\x76\x75\xd0\xc2\x3b\x35\xea\x59\x95\x27\xfd\x63\xab\x56\xcd\xce\x17\x2a\xd7\x58\x7f\xa7\xd5\x60\xb1\x84\xc3\x12\xee\xba\xe1\x77\x21\x2f\xc6\x37\xf9\xf3\xeb\x77\x32\xbe\x54\x4e\x3a\x0f\x25\xfc\x77\x5d\x27\xd4\xfa\xee\x69\x5c\xc6\xb9\x45\xd9\xa9\x9e\xee\xf4\xe5\x6c\x30\x4d\x95\x77\x05\x28\x78\xf0\x77\x2d\x40\xcd\x66\x21\x8d\xae\xf7\x8a\x70\x33\xa1\xac\x55\xdf\xb4\xd7\x8d\xa2\x7c\xf2\x3c\x21\xff\xf0\x84\xa8\x7e\x4b\x39\xc6\x35\xcf\xf0\xcd\x06\x67\x0c\x1e\x6f\x37\x43\x47\xba\xcd\x6d\x18\xef\xb6\x67\xbb\xb5\xe4\x47\x5c\x16\xd1\xed\xad\x4f\x7f\x45\x1b\x6d\xb7\x58\x29\xa1\xab\x95\x30\x36\x95\x59\xd1\x67\xf0\x9e\xfd\x78\x0d\x33\x9a\x1f\xcf\xb6\x98\x92\x7d\x4b\x8c\x00\x48\x91\xc6\x13\x86\x1b\x77\x0a\x3d\xb9\x17\x4e\x1b\xc1\xc9\xf6\x2b\x17\x76\x41\xbf\x64\x8c\x69\x4b\x16\xc5\x11\xff\x1b\xd0\x77\x60\x11\xc7\xc7\x2c\xcd\x8a\x28\xfe\x1b\x00\x00\xff\xff\xee\x07\x3a\xfe\x68\x08\x00\x00")

func wwwJavascriptMapzenWhosonfirstRenderJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstRenderJs,
		"www/javascript/mapzen.whosonfirst.render.js",
	)
}

func wwwJavascriptMapzenWhosonfirstRenderJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstRenderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.render.js", size: 2152, mode: os.FileMode(420), modTime: time.Unix(1506218401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstCatalogCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xe1\x8a\xeb\x20\x10\x85\xff\xfb\x14\x03\xe5\xfe\xb4\xe4\x16\xfa\xc7\x3e\xcd\x24\x4e\x92\xe1\xaa\x23\x3a\xbd\xdb\xb2\xf4\xdd\x97\x18\x59\x36\x6c\x11\x84\x99\xe3\x39\xe7\xf3\x14\x31\xc3\xa7\x01\x00\x58\x89\x97\x55\x1d\x5c\x87\x21\x3f\x6e\x6d\xf5\xc1\x5e\x57\x07\x7f\x87\xe1\xcf\xcd\xbc\x8c\x39\x7b\x52\xe4\x50\xbb\xc3\x73\xcd\x01\x9f\x2e\x49\xa2\xa6\x2b\x8e\x81\xba\x18\x38\x91\xed\x99\x17\x8a\x7b\xe0\x2c\x49\xed\x8c\x91\xc3\xd3\x41\xc5\x54\x6d\xa5\xc2\xf3\xcf\xb6\xbd\x6c\x9b\x47\x29\x9e\x8a\xad\x19\x27\x4e\x8b\x83\x7b\xaa\xa4\x7b\x4f\xe9\x25\xff\xa9\x28\x4f\x18\x2c\x06\x5e\x92\x03\x95\xbc\x7b\x33\x7a\xdf\x4c\xdf\x7f\x89\x58\x16\x4e\xfb\x62\x9b\x5b\xce\xda\x73\x46\x9c\xfe\x2d\x45\xee\xc9\xdb\x49\x82\x14\x77\x22\xbf\x9d\x03\x88\x4a\x76\x50\x25\xb0\x07\x5d\x39\x1d\xb4\x51\x54\x25\x1e\xe4\x56\xb2\x5d\x4a\x0f\xed\x80\x81\x66\xfd\x8d\x73\x24\x3e\x5f\xae\x14\x1b\x9d\xef\x74\x6f\x03\x8e\xef\xdf\x84\xbe\x8c\xf9\x0a\x00\x00\xff\xff\x7a\x01\x76\x73\xde\x01\x00\x00")

func wwwCssMapzenWhosonfirstCatalogCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstCatalogCss,
		"www/css/mapzen.whosonfirst.catalog.css",
	)
}

func wwwCssMapzenWhosonfirstCatalogCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstCatalogCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.catalog.css", size: 478, mode: os.FileMode(420), modTime: time.Unix(1506218178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstRenderCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x8d\xb1\xa3\x4b\x57\xd8\xc5\x7b\x1a\x37\x56\x12\x31\x5b\x36\xb2\xb2\xb5\x8c\xbe\xfb\x48\x9c\x96\x99\xb5\xa7\x11\x08\xe8\xb7\xf5\xeb\xff\xe4\x39\xc0\x77\x07\x00\x10\xa8\xa8\x29\x7a\x0e\x68\xf4\x9c\xd1\x02\x27\xc6\xf7\xf5\x28\x3a\x19\x89\xed\x3e\x9f\x6a\x9d\x9d\xf7\xc4\x63\x15\x2e\x5d\xb7\xf3\x73\xcc\x28\xa0\xee\x18\xf0\x66\xc7\x68\x26\xa4\x71\x52\x7b\xc0\x58\x1b\x87\xc4\x6a\x06\x17\x29\x9c\x2d\x14\xc7\xc5\x14\x14\x1a\xea\xe1\x17\x79\x9d\xec\xeb\x7e\xff\x52\xeb\x63\x12\x8f\x62\x4a\x76\xfd\x32\x0c\x66\x2e\xa8\x77\xe6\xa9\x6c\x23\x3f\x51\x94\x7a\x17\x8c\x0b\x34\xb2\x05\x4d\xb9\xcd\x0b\x37\x82\x8d\x68\x15\x96\xba\x71\x9d\x36\xbf\xa3\xeb\x3f\x46\x49\x33\x7b\xd3\xa7\x90\xc4\x3e\xa3\x5f\xbe\xdf\xf1\xea\x9a\xe0\x89\x62\x4e\xa2\x8e\xb5\xc9\x1e\x70\x50\x0b\x25\x05\xf2\xa0\x13\xf1\xa3\x7b\xb2\xae\xe9\xc1\xc5\x35\xdf\xf2\x53\x3c\xe9\xc6\xb6\x18\xff\x25\x69\x61\x77\x87\x37\x8c\x2d\x98\x1d\x48\x8a\x9a\x7e\xa2\xe0\xaf\x90\x35\x81\xa6\xfc\x30\x68\x6b\x11\xdc\xff\x1c\xea\x9b\x5d\x9b\xef\x32\xb5\x08\x8d\xb6\xad\x74\x77\xd3\x1b\xfe\x4b\xf7\x13\x00\x00\xff\xff\x1a\x32\x3a\xc0\xcf\x02\x00\x00")

func wwwCssMapzenWhosonfirstRenderCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstRenderCss,
		"www/css/mapzen.whosonfirst.render.css",
	)
}

func wwwCssMapzenWhosonfirstRenderCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstRenderCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.render.css", size: 719, mode: os.FileMode(420), modTime: time.Unix(1506218647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/javascript/mapzen.whosonfirst.catalog.init.js": wwwJavascriptMapzenWhosonfirstCatalogInitJs,
	"www/javascript/mapzen.whosonfirst.catalog.js": wwwJavascriptMapzenWhosonfirstCatalogJs,
	"www/javascript/mapzen.whosonfirst.render.js": wwwJavascriptMapzenWhosonfirstRenderJs,
	"www/css/mapzen.whosonfirst.catalog.css": wwwCssMapzenWhosonfirstCatalogCss,
	"www/css/mapzen.whosonfirst.render.css": wwwCssMapzenWhosonfirstRenderCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.css": &bintree{wwwCssMapzenWhosonfirstCatalogCss, map[string]*bintree{}},
			"mapzen.whosonfirst.render.css": &bintree{wwwCssMapzenWhosonfirstRenderCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"javascript": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.init.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogInitJs, map[string]*bintree{}},
			"mapzen.whosonfirst.catalog.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogJs, map[string]*bintree{}},
			"mapzen.whosonfirst.render.js": &bintree{wwwJavascriptMapzenWhosonfirstRenderJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
