// Code generated by go-bindata.
// sources:
// www/index.html
// www/javascript/mapzen.whosonfirst.catalog.init.js
// www/javascript/mapzen.whosonfirst.catalog.js
// www/javascript/mapzen.whosonfirst.render.js
// www/css/mapzen.whosonfirst.catalog.css
// www/css/mapzen.whosonfirst.render.css
// DO NOT EDIT!

package http

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xd1\x6f\xd3\x3e\x10\xc7\x9f\xdb\xbf\xe2\x7e\x7e\xd9\x26\x35\x89\xd6\x1f\x1b\x6c\x4b\x22\x21\x60\x12\x62\x68\x12\x08\xf6\x80\xd0\x74\x4d\xae\x8b\x57\xc7\xb6\xec\x4b\x47\x87\xf6\xbf\xa3\xc4\xce\x5a\x24\x24\x1e\xc6\xfa\xe0\x9e\xcf\xdf\x7e\xfc\x3d\xfb\xdc\xbc\xe1\x56\x95\x53\x80\xbc\x21\xac\xfb\x00\x20\x67\xc9\x8a\xca\xab\xc6\xec\x79\xb8\xd4\x70\x2e\x9d\x67\x78\x83\x8c\xca\xdc\xc0\x67\x4b\xaa\xd3\x2b\x72\x79\x16\x74\xe1\x37\x4a\xea\x15\xf0\xc6\x52\x21\x98\x7e\x70\x56\x79\x2f\xc0\x91\x2a\x84\xe7\x8d\x22\xdf\x10\xb1\x80\xc6\xd1\xb2\x10\x95\xf7\x59\x8b\xf6\x9e\x74\x7a\xeb\xd3\x41\x99\x3d\x0d\x73\xd7\x18\x6f\xf4\xb2\x37\x9a\x56\xc1\xe8\x3f\xe7\x3a\xd2\x35\xb9\x11\xdb\x53\x03\xda\x57\x4e\x5a\xde\x85\xdf\xe2\x1a\x43\x56\x80\x77\x55\x21\xb6\x89\x11\xdc\xca\xbe\x76\x51\xe6\x59\xc8\x97\x4f\x60\xfd\xc1\xe4\x73\xa0\xc7\x73\x7d\x4e\xb6\xd4\x92\x7f\xdf\x00\xe2\xa7\x6f\xd1\x6c\xec\xd1\x7c\x61\xea\x4d\xdc\xbb\x96\x6b\x90\x75\x21\x2a\xd4\x6b\xf4\x22\x64\x01\xf2\xa5\x71\x6d\x39\x9d\xe4\x52\xdb\x6e\xd7\x9a\x18\xd4\x77\x66\x79\x2d\x6b\x01\x1a\x5b\xda\xce\xd6\xa8\x3a\x2a\x84\x00\xab\xb0\xa2\xc6\xa8\x9a\x5c\x21\xde\x69\x26\x07\x08\x57\x97\xe7\xf0\xfe\xed\xd0\x53\x93\x7c\xd1\x31\x1b\x1d\xb9\xbe\x5b\xb4\x32\x92\x95\x31\xab\xce\x8a\xf2\x62\xf8\xce\xb3\x20\x7c\xb4\x95\x05\x5f\x71\x36\x9a\x77\xe4\x3b\xc5\x43\xdd\xb5\x5c\xc7\xca\xc6\x30\xcf\x42\xb9\x7d\xf8\x5f\x92\x4c\xff\x76\xe0\x83\x12\x60\x8d\x0e\xd0\xca\xeb\x15\x6d\xa0\x80\xda\x54\x5d\x4b\x9a\xd3\x9e\x95\xde\x10\xbf\x66\x76\x72\xd1\x31\xed\x8b\x1a\x19\x93\x70\x2b\x09\x5a\x99\xac\x68\x23\x0e\xce\x06\xc8\x45\xfa\x31\xdc\x16\x5a\xf9\x61\x00\x45\x64\x58\x7e\xdc\xa8\x45\x0b\xc5\x56\xdd\xa2\xdd\xdf\x6b\xd1\xee\xcd\xe0\x67\x10\x4e\xfa\x91\x51\xdf\x38\x6c\x2f\x2d\x4b\xa3\xfd\x69\x5c\x9b\x4c\x7c\x45\x9a\x4e\x41\xc4\xf5\xcc\xd1\x52\x2a\x95\x0c\x4f\x33\xbd\x97\x56\xcc\xa2\x30\x0a\xbe\x7c\xba\x38\x85\xdd\x96\x8a\xf9\xf1\x59\x45\x79\x3f\x3c\x0c\xe1\xc3\xc1\x59\x38\x94\x16\x6d\xea\x89\xbf\x4a\xba\xdb\xff\x36\x3f\x49\x5f\x1d\xbe\x3c\xfe\x7f\x3e\x4b\x4e\x8e\xd2\x17\xc7\xf3\xf9\xc9\xf1\xf7\x19\x1c\x1e\x1d\x3c\x56\xb7\xdb\xe8\x49\x52\x4e\xf3\x2c\xfc\x61\xfe\x0a\x00\x00\xff\xff\xbc\x7f\x0d\x57\x38\x05\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1336, mode: os.FileMode(420), modTime: time.Unix(1505166594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xc1\x6a\xc3\x30\x10\x44\xcf\xeb\xaf\x58\x7c\x92\x21\xe8\x07\x4c\x0e\x6d\x09\x34\xd0\x63\xa1\xc7\xa2\x4a\xeb\x44\x44\x59\x19\x69\x15\x93\x86\xfc\x7b\x91\x6d\x9a\x5b\x4e\xd2\xa2\x99\xc7\x8c\x76\xf2\xec\xe2\xa4\x8d\x73\xbb\x0b\xb1\x7c\xf8\x2c\xc4\x94\x54\x1b\xa2\x71\xed\x06\x87\xc2\x56\x7c\x64\xac\xb3\xa2\xaa\xe9\x6e\x0d\x34\x70\x31\x09\x7f\x8a\x48\x64\xdc\xa2\x8b\xb6\x9c\x89\x45\x1f\x48\x76\x81\xea\xf5\xf5\xba\x77\x95\x12\x4f\x65\x6c\xbb\xbe\x5a\x16\xb9\x8e\x6c\x83\xb7\x27\xdc\xfe\xc3\x55\x77\x6b\x1a\x00\x49\x57\xbc\x35\x88\x88\x00\x33\xdf\xbb\x67\xec\x29\x0e\xdf\xde\xcd\x6c\x80\x59\x3a\x9a\x94\x69\xcf\xa2\xbc\xd3\x17\x13\x0a\x75\x7d\xe5\xc2\xd9\x8c\xbf\xc4\x7a\x3a\xc6\x1c\x79\xf0\x29\x8b\xb6\x46\x4c\x88\x07\xbd\x04\x54\xde\x3d\xaa\xaa\x94\xc7\x25\xd0\x92\x22\xe1\x16\x9f\x10\x12\xb1\xa3\x34\x9b\xe6\x24\xf0\x30\x52\x2e\x41\xf2\xb3\x0e\xab\x64\x2d\x01\xeb\xa8\xcd\x38\x12\xbb\xb7\xa3\x0f\x4e\xa5\xe5\xed\x3e\x1f\xf7\x1a\xcb\x1a\xb1\x47\x54\x54\x17\x01\x60\x23\xe7\x18\x48\x87\x78\x50\xed\xd7\xfb\xcb\x67\xbb\x41\x5a\xc5\x00\xeb\x77\x26\x92\x92\x18\x07\x13\x32\xf5\x0d\xdc\xfb\xa6\xf2\xfe\x02\x00\x00\xff\xff\xae\xcc\x05\x3a\xfd\x01\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogInitJs,
		"www/javascript/mapzen.whosonfirst.catalog.init.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogInitJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.init.js", size: 509, mode: os.FileMode(420), modTime: time.Unix(1505164106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x96\x4f\x6f\xdb\x36\x14\xc0\xcf\xf6\xa7\x78\xe3\xc5\x12\xec\x2a\x3b\xf4\x54\x4d\x87\x6d\x08\xf6\x07\x5d\x07\xa4\x39\x0c\x08\x82\x80\x26\x9f\x2d\x22\x0c\xa9\x90\x54\x5d\x2f\xf5\x77\x1f\x28\x52\x12\xe5\x38\x9e\x7b\xa8\x1b\xea\xfd\xde\xff\xf7\x44\x7d\xa1\x06\x9e\x68\xf3\x2f\x2a\xa8\xfa\x3f\xbe\x7d\x83\x97\x43\x39\x0f\xa7\x62\x57\x6b\xab\xd5\x46\x18\xeb\x06\x64\xf2\x30\xe2\x27\xf8\x82\x51\x47\xa5\xde\x42\x05\xd9\xa6\x55\xcc\x09\xad\xb2\xfc\x65\x3e\x9f\x79\xb7\x16\xe5\x06\x2a\xf0\xc7\xd9\x42\x6a\xfd\xd8\x36\x8b\x0f\x30\x70\x82\xaf\x80\xad\x3b\x7a\xd6\xf1\xad\x91\x50\xc1\xa2\x76\xae\xf9\x70\x75\xb5\x80\x25\x48\xcd\xa8\x67\x8b\x5a\x5b\x07\x4b\x58\x5c\x09\xde\x09\x04\x2f\x07\x35\xad\xa4\xa6\x1c\xaa\xd1\xb2\xb1\x4d\xfe\xe2\xc5\xfe\x5f\xc7\x38\x6a\xb6\xe8\xd3\x33\xb6\x29\xc2\xa1\xec\x84\xdd\x8f\xd8\x40\x16\x1e\x16\x06\x29\xdf\x7f\x76\xd4\x21\xfc\x50\xc1\xfb\x60\x66\x36\x33\xe8\x5a\xa3\x82\xca\x61\x54\xec\xb2\x74\xd4\xb5\xf6\x81\x69\x8e\x50\x45\x47\x77\x8b\xf0\x74\x71\x5f\x1e\x73\x0e\xbf\xba\x57\xdc\x2d\x7e\x75\x3d\x3b\x28\x18\xba\x4b\x40\x83\xb6\xd1\xca\x62\x8a\x7a\x8a\x53\x47\xa1\x02\xd5\x4a\x99\xe8\x3b\xb3\x87\x18\x7a\x04\xfe\xfc\xfc\xf7\xa7\xa2\xa1\xc6\x62\x66\xe8\x2e\x7f\x95\x0a\xa3\x8e\xd5\x90\x61\x9f\x71\xf8\x65\x5a\x59\x2d\xb1\x90\x7a\x9b\x91\xeb\x9b\x1b\xb2\xf2\x5d\x5a\x01\xe6\x69\x5d\x60\x43\xa5\xc5\xde\x64\x30\xb7\xce\xbc\xe3\xe0\xe7\x30\x36\xcb\xe0\xb3\x8f\x16\x77\xf0\xcf\x5f\x1f\x7f\x77\xae\xb9\xc1\xe7\x16\xad\xcb\x02\x69\xf0\xb9\xa0\x9c\x5f\x7f\x41\xe5\x3e\x0a\xeb\x50\xa1\xc9\x88\xef\x2f\x59\xc5\x46\x77\x20\x00\x40\xcf\xeb\x06\x55\x46\x7e\xbb\xbe\xed\x83\x73\xa6\xc5\xd1\x9c\x45\xc5\x83\xf5\xc3\xaa\x9b\x44\x83\x8a\xa3\x49\x27\x31\xcc\xcb\x18\x22\xd3\x86\xdb\x30\x2c\x77\x24\x1e\xd1\x91\xfb\xe1\x40\x42\x03\x3c\xcd\x74\xab\xba\xc1\x0a\x92\x42\xa2\xda\xba\xba\xec\xa7\x2f\x0c\xdf\x5a\xfa\xd9\xe0\x9a\xb5\x4f\xa8\x5c\xc1\x0c\x52\x87\xd7\x12\xfd\x29\x23\x9d\x9c\xe4\xa1\x48\x1b\x6d\x20\xf3\x5a\xa2\xfa\xb1\x04\x01\x3f\x05\x0f\x25\x88\xe5\x32\x06\x99\xf6\x3d\xba\xbd\x13\xf7\xe5\x28\xb3\xba\x35\xac\xf3\x48\x1d\xbd\x23\xe1\x48\xee\xcb\xc9\x78\xb5\x46\x0c\x44\x6b\x04\x49\x66\xaa\xa6\xb6\x1e\x64\xfe\x10\x74\x8f\x1d\x3c\x30\x94\xf2\x5c\x5e\x9c\xc4\x39\x4b\xf8\x82\x36\x0d\x2a\xfe\x6b\x2d\x24\xcf\x8e\x34\xfd\x6c\x7f\xd2\x1c\xb3\xc0\xe7\x79\x92\x93\x0f\xe3\x72\x87\x03\x7d\x91\x3b\x4f\x4f\x9c\xb5\x46\x5c\xee\xab\x87\x2f\x72\xd5\x1a\x31\xf1\x64\x6b\xbd\xfb\x8e\x3a\xf6\x74\x61\xd1\xfd\xec\x9c\x11\xeb\xd6\x61\x46\x7c\xa7\xde\xf9\x26\xfa\x0d\x10\xf9\xd8\xe8\x51\xe1\x92\xe0\x88\xc7\x49\x9e\x1f\xbd\x88\x9e\xd0\xd1\x07\xa3\x77\xe7\x42\x34\x7d\x88\x3d\x3c\x71\x98\xf4\xff\x1c\x36\x74\xed\x1c\xd4\x97\xfb\xac\xbf\x3e\xed\x50\x8a\xd9\x30\xbc\x63\x3d\xb4\x62\x52\xb0\xc7\xf4\xda\xc0\x7e\xbf\xba\xac\xd1\xb7\x04\x27\x97\x45\xb2\x37\x28\x8b\xed\xe9\x16\xf4\xdd\x0d\x5b\x8a\x8e\x0a\x69\xd3\xca\x6d\xd1\xc5\xb2\xfd\xb2\xff\x83\x67\x24\x22\xef\x08\x2c\x43\xf3\xa2\xba\xbf\x94\xa2\xac\xb0\x6e\x2f\xb1\xe0\xc2\x36\x92\xee\xa1\xaa\x80\xac\xa5\x66\x8f\xa4\x7f\x59\xcf\xde\x00\x81\x28\xad\x90\xc4\xe8\x67\x28\x0b\xa1\x14\x9a\xdb\x70\x07\x85\x76\xc7\x0a\x05\x24\xbe\xbd\x67\x28\x2d\xc2\xff\x1a\x0f\x41\xbc\x65\xbd\x16\x7c\x70\x1d\x2e\x9a\xc3\xd1\x60\x8d\xd5\x39\xf1\x69\x11\x5e\xd3\xf1\xbf\x07\x5f\xde\xe4\x46\x79\x65\xe3\xf2\x1d\x4a\x15\x8e\xd6\x88\x69\x69\x1b\xaa\xc8\x0a\xc8\x7b\x92\x6c\xd1\x44\x65\xb2\x48\x41\x90\x2e\x74\xcf\x5e\xb0\x2f\x53\xe3\x7e\x86\xa7\xe1\x08\x7f\xe9\x9d\x98\x8f\xf3\x5a\x4c\x52\x6b\x13\xc5\x53\x89\x1c\xef\x4b\x9a\x60\x5a\xe0\xee\x66\x8a\x64\xd6\x6f\x5a\x04\x26\xb2\xc4\xf0\xe8\x2e\x0c\x53\xfc\x44\xe8\xf0\xee\x16\x9e\x87\xef\x81\xf8\xdc\x7f\x24\x96\xf3\xf9\x21\xcf\x7c\x41\xfe\x0b\x00\x00\xff\xff\x7d\x68\x67\x0a\xae\x0a\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogJs,
		"www/javascript/mapzen.whosonfirst.catalog.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.js", size: 2734, mode: os.FileMode(420), modTime: time.Unix(1505166477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstRenderJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xcd\x6e\xdb\x30\x0c\x3e\xcb\x4f\x41\x78\x87\xda\x48\xe0\x76\xd7\xba\xc6\x50\x0c\xbb\xee\xb4\xdb\x50\x14\x8a\xa5\x2c\x5a\x14\x2b\x90\x99\x25\x5d\x1b\x60\xef\xb0\x37\xdc\x93\x0c\x94\x64\x47\x4e\x1c\xf7\x50\x57\x36\x3f\xfe\xe8\xe3\x47\xe6\x17\xb7\xb0\xe1\xdb\xdf\xb2\x81\xaa\x3b\xbc\xbd\xc1\xeb\xb1\x4c\xfc\x5b\xb1\x5f\x99\xd6\x34\x4b\x65\x5b\xec\x21\x83\x8f\x01\x3e\x82\x2f\xac\x6c\x84\xb4\x50\x41\xb6\xdc\x35\x35\x2a\xd3\x64\xf9\x6b\x92\x30\xca\xda\x4a\xbd\x84\x0a\xe8\x95\xdd\x78\xe0\xb3\xe0\xc8\x6f\xee\xa1\x07\x8b\x39\xd4\x78\xc8\x5f\x13\xc6\x18\xfd\xa9\x25\x64\x8f\xd6\xf2\x97\x42\xb5\xee\x7f\x26\x72\x6f\x65\x56\xe2\xce\x36\x2e\x6a\x48\xfb\xac\x55\x8b\x5d\x88\x92\x40\xc7\x84\x01\x00\xd0\x51\xea\x56\x02\x85\xc3\x97\xad\x34\xcb\x4c\xe4\x50\x55\x90\x9a\xc5\x4f\x59\x63\x7a\x3d\xa6\x50\xf5\x79\xcc\x3e\x9c\x77\xa2\xbb\xd5\xa6\x41\xd9\x10\x5f\xb1\x2f\xca\x43\xe4\xdb\x83\xf7\x96\x6f\xb7\x8e\x25\x61\xea\xdd\x46\x36\x58\xd4\x56\x72\x94\x5f\xb4\xa4\xb7\x2c\x6d\xb7\xbc\x49\xf3\x92\x05\x16\x58\xf0\x28\xe8\xd9\x88\xcf\x2b\xa5\x45\x16\x52\xfa\xa2\xba\xca\x03\xb0\xbb\x3c\x3b\xce\x07\x6c\xab\x1a\xc7\xd9\xee\x58\xa2\xf2\x90\x2f\xb4\x9c\x28\xce\xd9\x53\x9f\xd7\x9d\x8b\x56\xe2\x23\xa2\x55\x8b\x1d\xca\x2c\xad\x35\x6f\xdb\x74\x0e\x11\xb0\x0b\xbf\x34\x16\xb2\x35\xa8\x06\x84\x63\xbc\xa7\xc4\x9a\xfd\x54\x46\x1b\xd2\x39\xac\xe6\x0b\xa9\x1d\xb7\x50\xc1\xda\x7f\xef\x8d\xcf\x35\x1e\x48\x7e\x74\x2f\xf8\x44\xd7\x83\x19\xa4\x45\x0a\x33\x58\xc3\xfd\x05\x7c\x25\xb9\x98\xec\x04\xae\x2e\x52\x5f\xa2\xbf\xc9\x03\x7e\x35\x42\x66\xa7\xd2\x82\x93\x8f\x3f\xe8\x9b\xc3\x38\xf3\x88\x7a\xae\x96\x21\xd2\x58\x41\x0b\x23\x5e\xce\xb4\x46\x93\x94\x89\xef\xeb\xa7\xb9\xe3\x20\xe4\x0f\x91\x07\x05\x90\x73\x1e\xf1\x60\xcd\x7e\x60\xf7\x35\x77\xba\x3a\x33\x0e\x55\xe7\x1e\x5e\x03\x31\xc8\x9a\x7d\x3f\x7f\x1e\x14\xe4\xe9\xa0\xa5\xd7\x25\x8b\x84\x49\x83\xfb\xbe\x30\x6b\xb3\xf3\x24\x15\x5a\x36\x3f\x70\x55\xc6\x5b\x22\x18\x2b\xb8\xbb\x3e\xcb\x6e\x1e\xd3\x7f\x7f\xfe\xa6\xe3\x3b\xe2\x14\xe7\xa1\x82\x8f\x13\x3b\xc1\x73\x7d\xf7\x34\x1e\xc6\x29\x45\xb5\x53\xfd\xdc\xe9\xcb\xb9\x20\x37\x55\xdd\x95\xa0\xe0\xc1\xdf\xb5\x04\x35\x9b\x85\x32\xfa\xde\x2b\x94\x9b\x89\xc8\x5a\xc5\x82\xbd\x2e\x14\xe5\x8b\xa7\xe9\xf8\x40\xd3\xa1\xe2\x96\x52\x8e\x6b\x9a\xa1\x9b\x0d\x6c\x04\x1e\x6f\x37\x41\x47\xba\x4d\x6d\x98\x5a\xfa\x6e\x09\xf9\xf1\x16\x25\xbb\xbd\xf5\xe5\xaf\x70\xa3\xdb\xad\xac\x15\xd7\xf5\x8a\xdb\x36\x13\x79\x19\x7b\xd0\xce\x7c\x7f\xa5\x12\x9a\x8e\x67\x3b\x4b\x89\x58\x12\x23\x00\x54\xa8\xe5\x09\x43\x8d\x3b\xa5\x9e\xdc\x09\xa7\x6d\xe0\xc2\xc6\xcc\x85\x3d\x10\x53\x46\x98\x8e\x32\x96\x30\xfa\x99\x8d\x15\x58\x26\xc9\x31\xcf\xf2\x92\x25\xff\x03\x00\x00\xff\xff\x52\x66\xe2\xfd\xc8\x07\x00\x00")

func wwwJavascriptMapzenWhosonfirstRenderJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstRenderJs,
		"www/javascript/mapzen.whosonfirst.render.js",
	)
}

func wwwJavascriptMapzenWhosonfirstRenderJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstRenderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.render.js", size: 1992, mode: os.FileMode(420), modTime: time.Unix(1505163474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstCatalogCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\x4d\x2c\x50\xa8\xe6\x52\x50\x50\x50\xc8\x48\xcd\x4c\xcf\x28\xb1\x52\x30\x35\x30\x28\xa8\xb0\x06\x0b\x95\x67\xa6\x94\x64\x58\x29\x18\x1a\x18\xa8\x5a\x73\xd5\x72\x71\xe9\xa5\xa4\x96\x24\x66\xe6\x14\x43\x75\xa4\x64\x16\x17\xe4\x24\x56\x5a\xe5\xe5\xe7\xa5\x82\xe4\x01\x01\x00\x00\xff\xff\x38\x70\x1a\xb5\x4d\x00\x00\x00")

func wwwCssMapzenWhosonfirstCatalogCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstCatalogCss,
		"www/css/mapzen.whosonfirst.catalog.css",
	)
}

func wwwCssMapzenWhosonfirstCatalogCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstCatalogCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.catalog.css", size: 77, mode: os.FileMode(420), modTime: time.Unix(1505165572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstRenderCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xd1\x6a\xc3\x30\x0c\x45\xdf\xf3\x15\x82\xb1\x47\x43\xba\x47\xf7\x6b\x9c\x58\x49\xc4\x14\x29\xd8\xea\x96\x30\xfa\xef\xa3\xb6\x57\x28\x2d\x0c\x3f\xdd\x6b\x7c\xce\xf5\x85\xe1\xa7\x03\x00\x60\xca\xe6\xb2\x1d\x8c\xce\x8e\x0d\x3d\x88\x0a\x9e\xcb\xd5\x1a\xd2\x4c\xe2\xfb\x6d\xaf\x79\x0b\x31\x92\xcc\xb5\xb8\x76\x9d\x85\x81\xb1\x61\xbe\x29\xda\xe2\x4f\x7d\xff\x7e\x6e\x58\x41\xb7\x20\xcd\x8b\xf9\x0f\x5c\x6b\x39\xa9\x98\x9b\xc2\x4a\x7c\x78\xc8\x41\xb2\xcb\x98\x68\xaa\xb0\xd4\x48\x5f\x98\x8c\xc6\xc0\x2e\x30\xcd\xe2\xc1\x74\x7b\xd4\xc3\x7d\x50\x1b\x58\x8a\x5b\x2e\x9c\xa5\x71\x86\x30\x7e\xce\x49\x2f\x12\xdd\xa8\xac\xc9\xbf\x61\xbc\x9d\xfa\x74\xd0\x14\x31\x79\xc8\xca\x14\xc1\x16\x92\xda\x1b\xee\xd6\xcc\x8c\x93\x3d\x7b\x9e\xa7\xdc\xcd\xf1\xcf\x5c\xd8\x6e\x50\x33\x5d\x3d\x9c\xb6\xbd\x69\x1e\x16\xbc\x34\xbd\x98\x55\xf0\xff\xff\xbf\xbb\x76\xbf\x01\x00\x00\xff\xff\xf5\xc5\x26\xf6\xd4\x01\x00\x00")

func wwwCssMapzenWhosonfirstRenderCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstRenderCss,
		"www/css/mapzen.whosonfirst.render.css",
	)
}

func wwwCssMapzenWhosonfirstRenderCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstRenderCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.render.css", size: 468, mode: os.FileMode(420), modTime: time.Unix(1505167119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/javascript/mapzen.whosonfirst.catalog.init.js": wwwJavascriptMapzenWhosonfirstCatalogInitJs,
	"www/javascript/mapzen.whosonfirst.catalog.js": wwwJavascriptMapzenWhosonfirstCatalogJs,
	"www/javascript/mapzen.whosonfirst.render.js": wwwJavascriptMapzenWhosonfirstRenderJs,
	"www/css/mapzen.whosonfirst.catalog.css": wwwCssMapzenWhosonfirstCatalogCss,
	"www/css/mapzen.whosonfirst.render.css": wwwCssMapzenWhosonfirstRenderCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.css": &bintree{wwwCssMapzenWhosonfirstCatalogCss, map[string]*bintree{}},
			"mapzen.whosonfirst.render.css": &bintree{wwwCssMapzenWhosonfirstRenderCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"javascript": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.init.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogInitJs, map[string]*bintree{}},
			"mapzen.whosonfirst.catalog.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogJs, map[string]*bintree{}},
			"mapzen.whosonfirst.render.js": &bintree{wwwJavascriptMapzenWhosonfirstRenderJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
