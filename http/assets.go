// Code generated by go-bindata.
// sources:
// www/index.html
// www/javascript/mapzen.whosonfirst.catalog.init.js
// www/javascript/mapzen.whosonfirst.catalog.js
// www/javascript/mapzen.whosonfirst.render.js
// www/css/mapzen.whosonfirst.catalog.css
// www/css/mapzen.whosonfirst.render.css
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x6f\xa3\x30\x10\x85\xcf\xc9\xaf\x18\xcd\x65\x6f\xf1\x1f\x30\x5c\x76\x37\x52\xa5\x4a\x39\xf4\x90\x63\xe5\xe0\xa1\x38\x31\x36\xf2\x0c\xa4\xe9\xaf\xaf\xc0\xd0\xa4\x52\x6f\x69\xb8\x60\x3f\x3d\x3e\xbf\x87\xc6\xba\x91\xd6\x97\x6b\x00\xdd\x90\xb1\xe3\x02\x40\x8b\x13\x4f\xe5\xbe\x89\x7f\x18\x76\x01\xb6\x2e\xb1\xc0\x5f\x23\xc6\xc7\x37\x78\xe9\xc8\xf7\xe1\x44\x49\xab\xec\xcb\xdf\x78\x17\x4e\x20\x97\x8e\x0a\x14\x7a\x17\x55\x31\x23\x24\xf2\x05\xb2\x5c\x3c\x71\x43\x24\x08\x4d\xa2\xba\xc0\x8a\x59\xb5\xa6\xfb\xa0\xb0\x39\xf2\x66\x72\xaa\xfb\x30\xe7\x26\x72\x0c\xf5\x18\x74\x53\xe5\xa0\xbf\xce\x4d\x14\x2c\xa5\x05\x3b\x52\x33\x9a\xab\xe4\x3a\xb9\x85\x1f\xcd\x60\xb2\x8a\xc0\xa9\x2a\xf0\x2a\x2c\xe0\xd6\x8d\xdd\xb1\xd4\x2a\xeb\xe5\x1d\xac\x1f\x42\x3e\x02\xbd\xfc\xd7\x47\xb2\x5d\x70\xf2\xfd\x00\x98\x9f\x71\x44\xd5\x32\xa3\xfa\x10\xed\x65\x3e\xdb\xba\x01\x9c\x2d\xb0\x32\x61\x30\x8c\x59\x05\xd0\x75\x4c\x6d\xb9\x5e\x69\x17\xba\xfe\x36\x1a\x4e\xee\x73\xac\x5f\x9d\x45\x08\xa6\xa5\xeb\x6e\x30\xbe\xa7\x02\x11\x3a\x6f\x2a\x6a\xa2\xb7\x94\x0a\xfc\x1f\x84\x12\x18\xd8\xef\xb6\xf0\xf4\x6f\x9a\xa9\x95\x3e\xf4\x22\x31\xcc\x5c\xee\x0f\xad\x9b\xc9\x3e\xc6\x53\xdf\x61\xf9\x3c\xbd\xb5\xca\xc6\xaf\x58\x2a\xe7\x9a\x77\x4b\xf8\x44\xdc\x7b\x99\x7a\x5b\x37\xcc\xcd\x96\xa5\x56\xb9\xae\x56\xf9\xb2\x7e\x06\x00\x00\xff\xff\x9b\x16\x2d\x8d\xb4\x03\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 948, mode: os.FileMode(420), modTime: time.Unix(1506039810, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xc1\x6a\xc3\x30\x10\x44\xcf\xeb\xaf\x58\x7c\x92\x21\xe8\x07\x4c\x0e\x6d\x09\x34\xd0\x63\xa1\xc7\xa2\x4a\xeb\x44\x44\x59\x19\x69\x15\x93\x86\xfc\x7b\x91\x6d\x9a\x5b\x4e\xd2\xa2\x99\xc7\x8c\x76\xf2\xec\xe2\xa4\x8d\x73\xbb\x0b\xb1\x7c\xf8\x2c\xc4\x94\x54\x1b\xa2\x71\xed\x06\x87\xc2\x56\x7c\x64\xac\xb3\xa2\xaa\xe9\x6e\x0d\x34\x70\x31\x09\x7f\x8a\x48\x64\xdc\xa2\x8b\xb6\x9c\x89\x45\x1f\x48\x76\x81\xea\xf5\xf5\xba\x77\x95\x12\x4f\x65\x6c\xbb\xbe\x5a\x16\xb9\x8e\x6c\x83\xb7\x27\xdc\xfe\xc3\x55\x77\x6b\x1a\x00\x49\x57\xbc\x35\x88\x88\x00\x33\xdf\xbb\x67\xec\x29\x0e\xdf\xde\xcd\x6c\x80\x59\x3a\x9a\x94\x69\xcf\xa2\xbc\xd3\x17\x13\x0a\x75\x7d\xe5\xc2\xd9\x8c\xbf\xc4\x7a\x3a\xc6\x1c\x79\xf0\x29\x8b\xb6\x46\x4c\x88\x07\xbd\x04\x54\xde\x3d\xaa\xaa\x94\xc7\x25\xd0\x92\x22\xe1\x16\x9f\x10\x12\xb1\xa3\x34\x9b\xe6\x24\xf0\x30\x52\x2e\x41\xf2\xb3\x0e\xab\x64\x2d\x01\xeb\xa8\xcd\x38\x12\xbb\xb7\xa3\x0f\x4e\xa5\xe5\xed\x3e\x1f\xf7\x1a\xcb\x1a\xb1\x47\x54\x54\x17\x01\x60\x23\xe7\x18\x48\x87\x78\x50\xed\xd7\xfb\xcb\x67\xbb\x41\x5a\xc5\x00\xeb\x77\x26\x92\x92\x18\x07\x13\x32\xf5\x0d\xdc\xfb\xa6\xf2\xfe\x02\x00\x00\xff\xff\xae\xcc\x05\x3a\xfd\x01\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogInitJs,
		"www/javascript/mapzen.whosonfirst.catalog.init.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogInitJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.init.js", size: 509, mode: os.FileMode(420), modTime: time.Unix(1506039287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstCatalogJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x4d\x6f\xe3\x36\x10\x3d\xcb\xbf\x62\xca\x8b\x25\xc4\xd1\xf6\xd0\x5e\xaa\xea\xd0\x16\x41\x3f\xb0\xdd\x02\xd9\x1c\x0a\x04\x41\xc0\x48\x63\x8b\x08\x43\x2a\x24\xb5\x5e\x37\xeb\xff\x5e\xf0\x43\x12\xe5\x38\xb6\xb2\xc0\xae\x57\xe2\x7b\xf3\x46\x33\x6f\x28\xea\x0b\x55\xf0\x44\xdb\xff\x50\x40\xd9\xff\xe7\xdb\x37\x78\xd9\x17\x0b\x7f\x95\x6f\x1b\xa9\xa5\x58\x33\xa5\xcd\x00\x99\xdc\x0c\xf0\x23\xf8\xbc\xa2\x86\x72\xb9\x81\x12\xd2\x75\x27\x2a\xc3\xa4\x48\xb3\x97\xc5\x22\xb1\xb2\x1a\xf9\x1a\x4a\xb0\x97\xc9\x92\x4b\xf9\xd8\xb5\xcb\x9f\x60\xc0\xb1\x7a\x05\xd5\x83\x43\x27\x00\x00\x8e\xd3\x2a\x69\x24\x94\x50\xcb\xaa\x7b\x42\x61\x72\x2e\x2b\x6a\xe1\xb9\x5b\xa9\x24\x2f\x16\x49\xe2\xa0\x9d\xe2\x50\x06\xc2\x05\x2c\x3f\x7c\x58\xc2\x05\x0c\xf0\x46\x6a\x13\x5f\xb7\xd4\x34\x82\x3e\xa1\x85\xb2\xda\x61\x59\x5d\x2c\xfa\x60\x52\x70\x49\x6b\x28\xc7\xf4\x94\x6e\xb3\x17\xbb\x6c\xff\x3a\x8c\xa1\x6a\x83\xb6\x46\x4a\xb7\xb9\xbf\x70\xc9\x78\x04\x5b\x43\xea\x6f\xe6\x0a\x69\xbd\xfb\x6c\xa8\x41\xf8\xae\x84\x1f\x7c\x98\x24\x51\x68\x3a\x25\x3c\x65\x3f\x12\x5d\xa9\x0c\x35\x9d\xbe\xaf\x64\x8d\x50\x06\xa1\xdb\xa5\xbf\xbb\xbc\x2b\x0e\x71\x06\xbf\x9a\x57\xb8\x1b\xfc\x6a\x7a\xec\x40\x50\x74\x1b\x01\x15\xea\x56\x0a\x8d\x31\xd4\xa2\x6a\x6a\x28\x94\x20\x3a\xce\x23\xbe\x51\x3b\x08\xa9\x07\xc0\x5f\x9f\xff\xf9\x94\xb7\x54\x69\x4c\x15\xdd\x66\xaf\x1e\xa5\xa2\xa6\x6a\x20\xc5\xfe\x89\xfd\xbf\x95\x14\x5a\x72\xcc\xb9\xdc\xa4\xe4\xea\xfa\x9a\xac\x6c\xef\x56\x80\x59\x5c\x17\x58\x53\xae\xb1\x0f\xe9\xc3\x3d\xa4\x56\xd8\xeb\xec\xc7\x66\x29\x7c\xb6\xd9\xe2\x16\xfe\xfd\xfb\xe3\x1f\xc6\xb4\xd7\xf8\xdc\xa1\x36\xa9\x47\x2a\x7c\xce\x69\x5d\x5f\x7d\x41\x61\x3e\x32\x6d\x50\xa0\x4a\x89\xed\x2f\x59\x85\x46\x3b\xa0\x35\x5d\x8f\x97\x2d\x8a\x94\xfc\x7e\x75\xd3\x27\x67\x54\x87\x63\x38\x8d\xa2\xf6\xd1\xf7\x2b\x67\x67\x85\xa2\x46\x15\xdb\xb9\xf7\x4b\x88\x6a\x7f\x7c\xae\x95\x54\xb5\xf6\xae\xb9\x25\xe1\x12\x0d\xb9\x1b\x2e\xc8\x5d\x11\x11\x2a\xd9\x09\x67\x32\xbf\x98\x73\x14\x1b\xd3\x14\xaf\x23\x1b\xfa\xc0\x31\x1e\x95\x4a\x21\x35\x78\xc5\xd1\x5e\xa5\xc4\xad\x93\xac\x58\x44\x1c\x2d\x3b\x55\xe1\x7d\x83\xb4\x46\x75\x8a\xdb\x90\xa1\x44\x13\x4e\x4e\xdb\x16\x45\xfd\x5b\xc3\x78\x9d\x1e\xb0\xad\xab\x3e\xc9\x1a\x53\xe2\x29\x24\xcb\x8e\xa5\xbd\x6b\xdf\x99\x40\xc4\x98\x27\x6f\x09\xc7\xc5\x1b\xaa\x9b\xf7\x89\x47\x8c\x79\xe2\x96\x70\x5c\xbc\x53\xec\x7d\xda\x23\x61\x9e\x74\xa7\xd8\x71\x65\xdd\xc8\xed\x3b\x9b\x3e\x32\xe6\x69\x5f\xbe\x51\x70\x17\xe2\x5e\xc9\xed\x29\x61\x15\xd5\x7b\x20\x4c\x74\x27\x26\x3c\x07\x8e\x0c\x73\x0e\x1a\xb5\xf7\x1c\x74\xec\xc6\xd9\x64\xc7\xe2\x65\x45\x12\xfe\x4c\x6b\xe3\x86\x73\x9a\xc9\x10\xcb\x8f\x6c\xb2\x96\x0a\x52\x5b\x43\x56\x7e\x5f\x00\x83\x9f\xfd\xd6\x50\x00\xbb\xb8\xf0\x6f\xcd\xc9\xe6\x1d\xf6\x8b\x5b\x76\x57\x8c\x6b\xbe\x6c\xb6\xf4\xd4\xd0\xdb\x7e\x2e\xef\x8a\xc9\x3b\xc2\x96\x6b\x80\xb8\xd9\x39\x00\x74\x8a\x0d\xeb\xd6\x63\xd1\x9b\xc3\xd6\x6f\x58\x73\xd6\x77\xdc\xc3\x0c\xee\x2b\xe4\xfc\x94\x03\x6a\x12\xde\x26\x11\x7e\x96\xf1\x3c\x3e\xcb\xa2\x87\x76\xed\x9f\x2d\x38\xa0\x67\xc9\x59\xf4\x44\xcc\x19\x68\xb6\xd8\x80\x9e\x25\x66\xd1\x13\x31\x6b\xc1\xd9\x5a\x3d\x78\x96\x54\xa7\xd8\x44\xc9\x59\x78\x7e\xd3\x7a\x74\xae\xd1\xfc\x62\x8c\x62\x0f\x9d\xc1\x94\x58\x5b\x5c\x5a\xc7\xd8\x97\x2a\xcb\x46\x57\x8d\x84\x79\xef\x93\x46\x6e\xc3\xfe\x12\xd9\xf2\x09\x0d\x9d\xb9\xb3\x24\x49\x0f\x3e\xb6\xab\xd8\x44\x4e\xc1\x06\x8b\x9c\x02\x0d\xad\x3d\x05\xea\x7b\x72\x32\xa9\xbe\x36\xd1\xde\x71\x50\x34\x29\x2a\xce\xaa\xc7\xf8\xb8\x8a\xfd\x96\xe0\x4a\x83\xb6\x6f\x38\x39\xa4\x46\x93\x8c\x3c\xdf\x1c\xef\x53\x6f\x01\xbf\xb1\xa0\xa1\x8c\xeb\xb8\xbc\x1b\x34\xa1\xb6\xbf\xee\xfe\xac\x53\x12\x20\x97\x04\x2e\x7c\x87\x03\xdd\x1e\x86\xc3\x5a\xae\xcd\x8e\x63\x5e\x33\xdd\x72\xba\x83\xb2\x04\xf2\xc0\x65\xf5\x48\xfa\x43\x62\xf2\x06\x10\x88\x90\x02\x49\xc8\x3e\x41\x9e\x33\x21\x50\xdd\xf8\xb3\xaf\xf7\x44\x91\x44\xe7\xcc\x70\x6a\x4c\x90\x6b\x84\xb3\xc1\x7d\x12\x6f\x45\x6f\x58\x3d\x48\xfb\x03\xee\xfe\xc0\x7d\x63\x75\x8e\x7c\x17\xf9\xe3\x61\xf8\xb9\xb7\xe5\x8d\x4e\xb2\xaf\x62\xcc\x1f\xb4\x98\x70\x30\x6b\x95\xe4\xba\xa5\x82\xac\x80\xfc\x48\xa2\x51\x9b\x50\x26\xd3\xe6\x17\xe2\xa9\xef\xb1\x33\x86\x6a\x1a\xdc\x7a\x78\x9a\x0e\xb3\x87\xed\x23\xfe\x38\xcd\xaa\x38\xd5\x3a\x22\x1e\x7b\x90\xc3\x79\x89\x1f\x30\x2e\x70\xfc\x8a\x4d\xfb\x49\xeb\x37\xfd\x78\x2d\x0a\x3c\xca\x79\x33\x85\x4f\x13\x07\x77\xa7\xff\x85\xff\x0e\x09\xf7\xed\x17\x6e\xb1\x58\xec\xb3\xd4\x16\xe4\xff\x00\x00\x00\xff\xff\x33\x52\x86\xc4\x6b\x0f\x00\x00")

func wwwJavascriptMapzenWhosonfirstCatalogJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstCatalogJs,
		"www/javascript/mapzen.whosonfirst.catalog.js",
	)
}

func wwwJavascriptMapzenWhosonfirstCatalogJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstCatalogJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.catalog.js", size: 3947, mode: os.FileMode(420), modTime: time.Unix(1506041205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJavascriptMapzenWhosonfirstRenderJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xcd\x6e\xdb\x30\x0c\x3e\xcb\x4f\x41\x78\x87\xda\x48\xe0\x76\xd7\xba\xc6\x50\x0c\xbb\xee\xb4\xdb\x50\x14\x8a\xa5\x2c\x5a\x14\x2b\x90\x99\x25\x5d\x1b\x60\xef\xb0\x37\xdc\x93\x0c\x94\x64\x47\x4e\x1c\xf7\x50\x57\x36\x3f\xfe\xe8\xe3\x47\xe6\x17\xb7\xb0\xe1\xdb\xdf\xb2\x81\xaa\x3b\xbc\xbd\xc1\xeb\xb1\x4c\xfc\x5b\xb1\x5f\x99\xd6\x34\x4b\x65\x5b\xec\x21\x83\x8f\x01\x3e\x82\x2f\xac\x6c\x84\xb4\x50\x41\xb6\xdc\x35\x35\x2a\xd3\x64\xf9\x6b\x92\x30\xca\xda\x4a\xbd\x84\x0a\xe8\x95\xdd\x78\xe0\xb3\xe0\xc8\x6f\xee\xa1\x07\x8b\x39\xd4\x78\xc8\x5f\x13\xc6\x18\xfd\xa9\x25\x64\x8f\xd6\xf2\x97\x42\xb5\xee\x7f\x26\x72\x6f\x65\x56\xe2\xce\x36\x2e\x6a\x48\xfb\xac\x55\x8b\x5d\x88\x92\x40\xc7\x84\x01\x00\xd0\x51\xea\x56\x02\x85\xc3\x97\xad\x34\xcb\x4c\xe4\x50\x55\x90\x9a\xc5\x4f\x59\x63\x7a\x3d\xa6\x50\xf5\x79\xcc\x3e\x9c\x77\xa2\xbb\xd5\xa6\x41\xd9\x10\x5f\xb1\x2f\xca\x43\xe4\xdb\x83\xf7\x96\x6f\xb7\x8e\x25\x61\xea\xdd\x46\x36\x58\xd4\x56\x72\x94\x5f\xb4\xa4\xb7\x2c\x6d\xb7\xbc\x49\xf3\x92\x05\x16\x58\xf0\x28\xe8\xd9\x88\xcf\x2b\xa5\x45\x16\x52\xfa\xa2\xba\xca\x03\xb0\xbb\x3c\x3b\xce\x07\x6c\xab\x1a\xc7\xd9\xee\x58\xa2\xf2\x90\x2f\xb4\x9c\x28\xce\xd9\x53\x9f\xd7\x9d\x8b\x56\xe2\x23\xa2\x55\x8b\x1d\xca\x2c\xad\x35\x6f\xdb\x74\x0e\x11\xb0\x0b\xbf\x34\x16\xb2\x35\xa8\x06\x84\x63\xbc\xa7\xc4\x9a\xfd\x54\x46\x1b\xd2\x39\xac\xe6\x0b\xa9\x1d\xb7\x50\xc1\xda\x7f\xef\x8d\xcf\x35\x1e\x48\x7e\x74\x2f\xf8\x44\xd7\x83\x19\xa4\x45\x0a\x33\x58\xc3\xfd\x05\x7c\x25\xb9\x98\xec\x04\xae\x2e\x52\x5f\xa2\xbf\xc9\x03\x7e\x35\x42\x66\xa7\xd2\x82\x93\x8f\x3f\xe8\x9b\xc3\x38\xf3\x88\x7a\xae\x96\x21\xd2\x58\x41\x0b\x23\x5e\xce\xb4\x46\x93\x94\x89\xef\xeb\xa7\xb9\xe3\x20\xe4\x0f\x91\x07\x05\x90\x73\x1e\xf1\x60\xcd\x7e\x60\xf7\x35\x77\xba\x3a\x33\x0e\x55\xe7\x1e\x5e\x03\x31\xc8\x9a\x7d\x3f\x7f\x1e\x14\xe4\xe9\xa0\xa5\xd7\x25\x8b\x84\x49\x83\xfb\xbe\x30\x6b\xb3\xf3\x24\x15\x5a\x36\x3f\x70\x55\xc6\x5b\x22\x18\x2b\xb8\xbb\x3e\xcb\x6e\x1e\xd3\x7f\x7f\xfe\xa6\xe3\x3b\xe2\x14\xe7\xa1\x82\x8f\x13\x3b\xc1\x73\x7d\xf7\x34\x1e\xc6\x29\x45\xb5\x53\xfd\xdc\xe9\xcb\xb9\x20\x37\x55\xdd\x95\xa0\xe0\xc1\xdf\xb5\x04\x35\x9b\x85\x32\xfa\xde\x2b\x94\x9b\x89\xc8\x5a\xc5\x82\xbd\x2e\x14\xe5\x8b\xa7\xe9\xf8\x40\xd3\xa1\xe2\x96\x52\x8e\x6b\x9a\xa1\x9b\x0d\x6c\x04\x1e\x6f\x37\x41\x47\xba\x4d\x6d\x98\x5a\xfa\x6e\x09\xf9\xf1\x16\x25\xbb\xbd\xf5\xe5\xaf\x70\xa3\xdb\xad\xac\x15\xd7\xf5\x8a\xdb\x36\x13\x79\x19\x7b\xd0\xce\x7c\x7f\xa5\x12\x9a\x8e\x67\x3b\x4b\x89\x58\x12\x23\x00\x54\xa8\xe5\x09\x43\x8d\x3b\xa5\x9e\xdc\x09\xa7\x6d\xe0\xc2\xc6\xcc\x85\x3d\x10\x53\x46\x98\x8e\x32\x96\x30\xfa\x99\x8d\x15\x58\x26\xc9\x31\xcf\xf2\x92\x25\xff\x03\x00\x00\xff\xff\x52\x66\xe2\xfd\xc8\x07\x00\x00")

func wwwJavascriptMapzenWhosonfirstRenderJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJavascriptMapzenWhosonfirstRenderJs,
		"www/javascript/mapzen.whosonfirst.render.js",
	)
}

func wwwJavascriptMapzenWhosonfirstRenderJs() (*asset, error) {
	bytes, err := wwwJavascriptMapzenWhosonfirstRenderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/javascript/mapzen.whosonfirst.render.js", size: 1992, mode: os.FileMode(420), modTime: time.Unix(1506039287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstCatalogCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\x4d\x2c\x50\xa8\xe6\x52\x50\x50\x50\xc8\x48\xcd\x4c\xcf\x28\xb1\x52\x30\x35\x30\x28\xa8\xb0\x06\x0b\x95\x67\xa6\x94\x64\x58\x29\x18\x1a\x18\xa8\x5a\x73\xd5\x72\x71\xe9\xa5\xa4\x96\x24\x66\xe6\x14\x43\x75\xa4\x64\x16\x17\xe4\x24\x56\x5a\xe5\xe5\xe7\xa5\x82\xe4\x01\x01\x00\x00\xff\xff\x38\x70\x1a\xb5\x4d\x00\x00\x00")

func wwwCssMapzenWhosonfirstCatalogCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstCatalogCss,
		"www/css/mapzen.whosonfirst.catalog.css",
	)
}

func wwwCssMapzenWhosonfirstCatalogCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstCatalogCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.catalog.css", size: 77, mode: os.FileMode(420), modTime: time.Unix(1506039287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCssMapzenWhosonfirstRenderCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xd1\x6a\xc3\x30\x0c\x45\xdf\xf3\x15\x82\xb1\x47\x43\xba\x47\xf7\x6b\x9c\x58\x49\xc4\x14\x29\xd8\xea\x96\x30\xfa\xef\xa3\xb6\x57\x28\x2d\x0c\x3f\xdd\x6b\x7c\xce\xf5\x85\xe1\xa7\x03\x00\x60\xca\xe6\xb2\x1d\x8c\xce\x8e\x0d\x3d\x88\x0a\x9e\xcb\xd5\x1a\xd2\x4c\xe2\xfb\x6d\xaf\x79\x0b\x31\x92\xcc\xb5\xb8\x76\x9d\x85\x81\xb1\x61\xbe\x29\xda\xe2\x4f\x7d\xff\x7e\x6e\x58\x41\xb7\x20\xcd\x8b\xf9\x0f\x5c\x6b\x39\xa9\x98\x9b\xc2\x4a\x7c\x78\xc8\x41\xb2\xcb\x98\x68\xaa\xb0\xd4\x48\x5f\x98\x8c\xc6\xc0\x2e\x30\xcd\xe2\xc1\x74\x7b\xd4\xc3\x7d\x50\x1b\x58\x8a\x5b\x2e\x9c\xa5\x71\x86\x30\x7e\xce\x49\x2f\x12\xdd\xa8\xac\xc9\xbf\x61\xbc\x9d\xfa\x74\xd0\x14\x31\x79\xc8\xca\x14\xc1\x16\x92\xda\x1b\xee\xd6\xcc\x8c\x93\x3d\x7b\x9e\xa7\xdc\xcd\xf1\xcf\x5c\xd8\x6e\x50\x33\x5d\x3d\x9c\xb6\xbd\x69\x1e\x16\xbc\x34\xbd\x98\x55\xf0\xff\xff\xbf\xbb\x76\xbf\x01\x00\x00\xff\xff\xf5\xc5\x26\xf6\xd4\x01\x00\x00")

func wwwCssMapzenWhosonfirstRenderCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwCssMapzenWhosonfirstRenderCss,
		"www/css/mapzen.whosonfirst.render.css",
	)
}

func wwwCssMapzenWhosonfirstRenderCss() (*asset, error) {
	bytes, err := wwwCssMapzenWhosonfirstRenderCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/css/mapzen.whosonfirst.render.css", size: 468, mode: os.FileMode(420), modTime: time.Unix(1506039287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html":                                    wwwIndexHtml,
	"www/javascript/mapzen.whosonfirst.catalog.init.js": wwwJavascriptMapzenWhosonfirstCatalogInitJs,
	"www/javascript/mapzen.whosonfirst.catalog.js":      wwwJavascriptMapzenWhosonfirstCatalogJs,
	"www/javascript/mapzen.whosonfirst.render.js":       wwwJavascriptMapzenWhosonfirstRenderJs,
	"www/css/mapzen.whosonfirst.catalog.css":            wwwCssMapzenWhosonfirstCatalogCss,
	"www/css/mapzen.whosonfirst.render.css":             wwwCssMapzenWhosonfirstRenderCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.css": &bintree{wwwCssMapzenWhosonfirstCatalogCss, map[string]*bintree{}},
			"mapzen.whosonfirst.render.css":  &bintree{wwwCssMapzenWhosonfirstRenderCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"javascript": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.catalog.init.js": &bintree{wwwJavascriptMapzenWhosonfirstCatalogInitJs, map[string]*bintree{}},
			"mapzen.whosonfirst.catalog.js":      &bintree{wwwJavascriptMapzenWhosonfirstCatalogJs, map[string]*bintree{}},
			"mapzen.whosonfirst.render.js":       &bintree{wwwJavascriptMapzenWhosonfirstRenderJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
